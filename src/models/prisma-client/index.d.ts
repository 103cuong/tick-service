// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from 'graphql';
import { makePrismaClientClass, BaseClientOptions, Model } from 'prisma-client-lib';
import { typeDefs } from './prisma-schema';

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> & U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  account: (where?: AccountWhereInput) => Promise<boolean>;
  category: (where?: CategoryWhereInput) => Promise<boolean>;
  image: (where?: ImageWhereInput) => Promise<boolean>;
  step: (where?: StepWhereInput) => Promise<boolean>;
  task: (where?: TaskWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(query: string, variables?: { [key: string]: any }) => Promise<T>;

  /**
   * Queries
   */

  account: (where: AccountWhereUniqueInput) => AccountNullablePromise;
  accounts: (args?: {
    where?: AccountWhereInput;
    orderBy?: AccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Account>;
  accountsConnection: (args?: {
    where?: AccountWhereInput;
    orderBy?: AccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AccountConnectionPromise;
  category: (where: CategoryWhereUniqueInput) => CategoryNullablePromise;
  categories: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Category>;
  categoriesConnection: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CategoryConnectionPromise;
  image: (where: ImageWhereUniqueInput) => ImageNullablePromise;
  images: (args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Image>;
  imagesConnection: (args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ImageConnectionPromise;
  step: (where: StepWhereUniqueInput) => StepNullablePromise;
  steps: (args?: {
    where?: StepWhereInput;
    orderBy?: StepOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Step>;
  stepsConnection: (args?: {
    where?: StepWhereInput;
    orderBy?: StepOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StepConnectionPromise;
  task: (where: TaskWhereUniqueInput) => TaskNullablePromise;
  tasks: (args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Task>;
  tasksConnection: (args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TaskConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAccount: (data: AccountCreateInput) => AccountPromise;
  updateAccount: (args: {
    data: AccountUpdateInput;
    where: AccountWhereUniqueInput;
  }) => AccountPromise;
  updateManyAccounts: (args: {
    data: AccountUpdateManyMutationInput;
    where?: AccountWhereInput;
  }) => BatchPayloadPromise;
  upsertAccount: (args: {
    where: AccountWhereUniqueInput;
    create: AccountCreateInput;
    update: AccountUpdateInput;
  }) => AccountPromise;
  deleteAccount: (where: AccountWhereUniqueInput) => AccountPromise;
  deleteManyAccounts: (where?: AccountWhereInput) => BatchPayloadPromise;
  createCategory: (data: CategoryCreateInput) => CategoryPromise;
  updateCategory: (args: {
    data: CategoryUpdateInput;
    where: CategoryWhereUniqueInput;
  }) => CategoryPromise;
  updateManyCategories: (args: {
    data: CategoryUpdateManyMutationInput;
    where?: CategoryWhereInput;
  }) => BatchPayloadPromise;
  upsertCategory: (args: {
    where: CategoryWhereUniqueInput;
    create: CategoryCreateInput;
    update: CategoryUpdateInput;
  }) => CategoryPromise;
  deleteCategory: (where: CategoryWhereUniqueInput) => CategoryPromise;
  deleteManyCategories: (where?: CategoryWhereInput) => BatchPayloadPromise;
  createImage: (data: ImageCreateInput) => ImagePromise;
  updateImage: (args: { data: ImageUpdateInput; where: ImageWhereUniqueInput }) => ImagePromise;
  updateManyImages: (args: {
    data: ImageUpdateManyMutationInput;
    where?: ImageWhereInput;
  }) => BatchPayloadPromise;
  upsertImage: (args: {
    where: ImageWhereUniqueInput;
    create: ImageCreateInput;
    update: ImageUpdateInput;
  }) => ImagePromise;
  deleteImage: (where: ImageWhereUniqueInput) => ImagePromise;
  deleteManyImages: (where?: ImageWhereInput) => BatchPayloadPromise;
  createStep: (data: StepCreateInput) => StepPromise;
  updateStep: (args: { data: StepUpdateInput; where: StepWhereUniqueInput }) => StepPromise;
  updateManySteps: (args: {
    data: StepUpdateManyMutationInput;
    where?: StepWhereInput;
  }) => BatchPayloadPromise;
  upsertStep: (args: {
    where: StepWhereUniqueInput;
    create: StepCreateInput;
    update: StepUpdateInput;
  }) => StepPromise;
  deleteStep: (where: StepWhereUniqueInput) => StepPromise;
  deleteManySteps: (where?: StepWhereInput) => BatchPayloadPromise;
  createTask: (data: TaskCreateInput) => TaskPromise;
  updateTask: (args: { data: TaskUpdateInput; where: TaskWhereUniqueInput }) => TaskPromise;
  updateManyTasks: (args: {
    data: TaskUpdateManyMutationInput;
    where?: TaskWhereInput;
  }) => BatchPayloadPromise;
  upsertTask: (args: {
    where: TaskWhereUniqueInput;
    create: TaskCreateInput;
    update: TaskUpdateInput;
  }) => TaskPromise;
  deleteTask: (where: TaskWhereUniqueInput) => TaskPromise;
  deleteManyTasks: (where?: TaskWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: { data: UserUpdateInput; where: UserWhereUniqueInput }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  account: (where?: AccountSubscriptionWhereInput) => AccountSubscriptionPayloadSubscription;
  category: (where?: CategorySubscriptionWhereInput) => CategorySubscriptionPayloadSubscription;
  image: (where?: ImageSubscriptionWhereInput) => ImageSubscriptionPayloadSubscription;
  step: (where?: StepSubscriptionWhereInput) => StepSubscriptionPayloadSubscription;
  task: (where?: TaskSubscriptionWhereInput) => TaskSubscriptionPayloadSubscription;
  user: (where?: UserSubscriptionWhereInput) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type StepOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'index_ASC'
  | 'index_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'status_ASC'
  | 'status_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';

export type TaskPriority = 'Highest' | 'High' | 'Medium' | 'Low' | 'Lowest';

export type TaskOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'index_ASC'
  | 'index_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'content_ASC'
  | 'content_DESC'
  | 'status_ASC'
  | 'status_DESC'
  | 'priority_ASC'
  | 'priority_DESC'
  | 'isImportant_ASC'
  | 'isImportant_DESC'
  | 'dueDate_ASC'
  | 'dueDate_DESC'
  | 'reminderDate_ASC'
  | 'reminderDate_DESC'
  | 'doSendMail_ASC'
  | 'doSendMail_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';

export type AccountOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'username_ASC'
  | 'username_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'role_ASC'
  | 'role_DESC'
  | 'status_ASC'
  | 'status_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';

export type TaskStatus = 'Todo' | 'InProcess' | 'Expired' | 'Done';

export type StepStatus = 'Todo' | 'Done';

export type UserOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'bio_ASC'
  | 'bio_DESC'
  | 'dob_ASC'
  | 'dob_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';

export type CategoryOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'index_ASC'
  | 'index_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';

export type Role = 'Free' | 'Premium';

export type MutationType = 'CREATED' | 'UPDATED' | 'DELETED';

export type ImageOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'url_ASC'
  | 'url_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';

export type AccountStatus = 'Pending' | 'Active' | 'Deactive';

export interface TaskUpdateWithWhereUniqueWithoutCategoryInput {
  where: TaskWhereUniqueInput;
  data: TaskUpdateWithoutCategoryDataInput;
}

export type AccountWhereUniqueInput = AtLeastOne<{
  id: Maybe<UUID>;
  username?: Maybe<String>;
  email?: Maybe<String>;
}>;

export interface AccountCreateOneWithoutImagesInput {
  create?: Maybe<AccountCreateWithoutImagesInput>;
  connect?: Maybe<AccountWhereUniqueInput>;
}

export interface CategoryScalarWhereInput {
  id?: Maybe<UUID>;
  id_not?: Maybe<UUID>;
  id_in?: Maybe<UUID[] | UUID>;
  id_not_in?: Maybe<UUID[] | UUID>;
  id_lt?: Maybe<UUID>;
  id_lte?: Maybe<UUID>;
  id_gt?: Maybe<UUID>;
  id_gte?: Maybe<UUID>;
  id_contains?: Maybe<UUID>;
  id_not_contains?: Maybe<UUID>;
  id_starts_with?: Maybe<UUID>;
  id_not_starts_with?: Maybe<UUID>;
  id_ends_with?: Maybe<UUID>;
  id_not_ends_with?: Maybe<UUID>;
  index?: Maybe<Int>;
  index_not?: Maybe<Int>;
  index_in?: Maybe<Int[] | Int>;
  index_not_in?: Maybe<Int[] | Int>;
  index_lt?: Maybe<Int>;
  index_lte?: Maybe<Int>;
  index_gt?: Maybe<Int>;
  index_gte?: Maybe<Int>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  OR?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  NOT?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
}

export interface AccountCreateWithoutImagesInput {
  id?: Maybe<UUID>;
  username: String;
  password: String;
  email: String;
  role?: Maybe<Role>;
  status?: Maybe<AccountStatus>;
  users?: Maybe<UserCreateManyWithoutAccountInput>;
  categories?: Maybe<CategoryCreateManyWithoutAccountInput>;
  tasks?: Maybe<TaskCreateManyWithoutAccountInput>;
  steps?: Maybe<StepCreateManyWithoutAccountInput>;
}

export interface TaskUpdateOneRequiredWithoutStepsInput {
  create?: Maybe<TaskCreateWithoutStepsInput>;
  update?: Maybe<TaskUpdateWithoutStepsDataInput>;
  upsert?: Maybe<TaskUpsertWithoutStepsInput>;
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface AccountUpdateInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  role?: Maybe<Role>;
  status?: Maybe<AccountStatus>;
  users?: Maybe<UserUpdateManyWithoutAccountInput>;
  categories?: Maybe<CategoryUpdateManyWithoutAccountInput>;
  tasks?: Maybe<TaskUpdateManyWithoutAccountInput>;
  steps?: Maybe<StepUpdateManyWithoutAccountInput>;
  images?: Maybe<ImageUpdateManyWithoutAccountInput>;
}

export interface ImageWhereInput {
  id?: Maybe<UUID>;
  id_not?: Maybe<UUID>;
  id_in?: Maybe<UUID[] | UUID>;
  id_not_in?: Maybe<UUID[] | UUID>;
  id_lt?: Maybe<UUID>;
  id_lte?: Maybe<UUID>;
  id_gt?: Maybe<UUID>;
  id_gte?: Maybe<UUID>;
  id_contains?: Maybe<UUID>;
  id_not_contains?: Maybe<UUID>;
  id_starts_with?: Maybe<UUID>;
  id_not_starts_with?: Maybe<UUID>;
  id_ends_with?: Maybe<UUID>;
  id_not_ends_with?: Maybe<UUID>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  task?: Maybe<TaskWhereInput>;
  account?: Maybe<AccountWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ImageWhereInput[] | ImageWhereInput>;
  OR?: Maybe<ImageWhereInput[] | ImageWhereInput>;
  NOT?: Maybe<ImageWhereInput[] | ImageWhereInput>;
}

export interface UserUpdateManyWithoutAccountInput {
  create?: Maybe<UserCreateWithoutAccountInput[] | UserCreateWithoutAccountInput>;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    UserUpdateWithWhereUniqueWithoutAccountInput[] | UserUpdateWithWhereUniqueWithoutAccountInput
  >;
  upsert?: Maybe<
    UserUpsertWithWhereUniqueWithoutAccountInput[] | UserUpsertWithWhereUniqueWithoutAccountInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput>;
}

export interface TaskSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TaskWhereInput>;
  AND?: Maybe<TaskSubscriptionWhereInput[] | TaskSubscriptionWhereInput>;
  OR?: Maybe<TaskSubscriptionWhereInput[] | TaskSubscriptionWhereInput>;
  NOT?: Maybe<TaskSubscriptionWhereInput[] | TaskSubscriptionWhereInput>;
}

export interface UserUpdateWithWhereUniqueWithoutAccountInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutAccountDataInput;
}

export interface StepSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<StepWhereInput>;
  AND?: Maybe<StepSubscriptionWhereInput[] | StepSubscriptionWhereInput>;
  OR?: Maybe<StepSubscriptionWhereInput[] | StepSubscriptionWhereInput>;
  NOT?: Maybe<StepSubscriptionWhereInput[] | StepSubscriptionWhereInput>;
}

export interface UserUpdateWithoutAccountDataInput {
  name?: Maybe<String>;
  bio?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
}

export interface ImageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ImageWhereInput>;
  AND?: Maybe<ImageSubscriptionWhereInput[] | ImageSubscriptionWhereInput>;
  OR?: Maybe<ImageSubscriptionWhereInput[] | ImageSubscriptionWhereInput>;
  NOT?: Maybe<ImageSubscriptionWhereInput[] | ImageSubscriptionWhereInput>;
}

export interface UserUpsertWithWhereUniqueWithoutAccountInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutAccountDataInput;
  create: UserCreateWithoutAccountInput;
}

export interface AccountSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AccountWhereInput>;
  AND?: Maybe<AccountSubscriptionWhereInput[] | AccountSubscriptionWhereInput>;
  OR?: Maybe<AccountSubscriptionWhereInput[] | AccountSubscriptionWhereInput>;
  NOT?: Maybe<AccountSubscriptionWhereInput[] | AccountSubscriptionWhereInput>;
}

export interface UserScalarWhereInput {
  id?: Maybe<UUID>;
  id_not?: Maybe<UUID>;
  id_in?: Maybe<UUID[] | UUID>;
  id_not_in?: Maybe<UUID[] | UUID>;
  id_lt?: Maybe<UUID>;
  id_lte?: Maybe<UUID>;
  id_gt?: Maybe<UUID>;
  id_gte?: Maybe<UUID>;
  id_contains?: Maybe<UUID>;
  id_not_contains?: Maybe<UUID>;
  id_starts_with?: Maybe<UUID>;
  id_not_starts_with?: Maybe<UUID>;
  id_ends_with?: Maybe<UUID>;
  id_not_ends_with?: Maybe<UUID>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  bio?: Maybe<String>;
  bio_not?: Maybe<String>;
  bio_in?: Maybe<String[] | String>;
  bio_not_in?: Maybe<String[] | String>;
  bio_lt?: Maybe<String>;
  bio_lte?: Maybe<String>;
  bio_gt?: Maybe<String>;
  bio_gte?: Maybe<String>;
  bio_contains?: Maybe<String>;
  bio_not_contains?: Maybe<String>;
  bio_starts_with?: Maybe<String>;
  bio_not_starts_with?: Maybe<String>;
  bio_ends_with?: Maybe<String>;
  bio_not_ends_with?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  dob_not?: Maybe<DateTimeInput>;
  dob_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dob_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dob_lt?: Maybe<DateTimeInput>;
  dob_lte?: Maybe<DateTimeInput>;
  dob_gt?: Maybe<DateTimeInput>;
  dob_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  bio?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface AccountUpdateWithoutUsersDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  role?: Maybe<Role>;
  status?: Maybe<AccountStatus>;
  categories?: Maybe<CategoryUpdateManyWithoutAccountInput>;
  tasks?: Maybe<TaskUpdateManyWithoutAccountInput>;
  steps?: Maybe<StepUpdateManyWithoutAccountInput>;
  images?: Maybe<ImageUpdateManyWithoutAccountInput>;
}

export interface UserUpdateManyDataInput {
  name?: Maybe<String>;
  bio?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  bio?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  account?: Maybe<AccountUpdateOneRequiredWithoutUsersInput>;
}

export interface CategoryUpdateManyWithoutAccountInput {
  create?: Maybe<CategoryCreateWithoutAccountInput[] | CategoryCreateWithoutAccountInput>;
  delete?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  connect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  set?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  disconnect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  update?: Maybe<
    | CategoryUpdateWithWhereUniqueWithoutAccountInput[]
    | CategoryUpdateWithWhereUniqueWithoutAccountInput
  >;
  upsert?: Maybe<
    | CategoryUpsertWithWhereUniqueWithoutAccountInput[]
    | CategoryUpsertWithWhereUniqueWithoutAccountInput
  >;
  deleteMany?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  updateMany?: Maybe<
    CategoryUpdateManyWithWhereNestedInput[] | CategoryUpdateManyWithWhereNestedInput
  >;
}

export type CategoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<UUID>;
}>;

export interface CategoryUpdateWithWhereUniqueWithoutAccountInput {
  where: CategoryWhereUniqueInput;
  data: CategoryUpdateWithoutAccountDataInput;
}

export interface UserCreateInput {
  id?: Maybe<UUID>;
  name: String;
  bio?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  account: AccountCreateOneWithoutUsersInput;
}

export interface CategoryUpdateWithoutAccountDataInput {
  index?: Maybe<Int>;
  name?: Maybe<String>;
  tasks?: Maybe<TaskUpdateManyWithoutCategoryInput>;
}

export type ImageWhereUniqueInput = AtLeastOne<{
  id: Maybe<UUID>;
}>;

export interface TaskUpdateManyWithoutCategoryInput {
  create?: Maybe<TaskCreateWithoutCategoryInput[] | TaskCreateWithoutCategoryInput>;
  delete?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  connect?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  set?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  disconnect?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  update?: Maybe<
    TaskUpdateWithWhereUniqueWithoutCategoryInput[] | TaskUpdateWithWhereUniqueWithoutCategoryInput
  >;
  upsert?: Maybe<
    TaskUpsertWithWhereUniqueWithoutCategoryInput[] | TaskUpsertWithWhereUniqueWithoutCategoryInput
  >;
  deleteMany?: Maybe<TaskScalarWhereInput[] | TaskScalarWhereInput>;
  updateMany?: Maybe<TaskUpdateManyWithWhereNestedInput[] | TaskUpdateManyWithWhereNestedInput>;
}

export interface TaskCreateInput {
  id?: Maybe<UUID>;
  index?: Maybe<Int>;
  title: String;
  content?: Maybe<String>;
  status?: Maybe<TaskStatus>;
  priority?: Maybe<TaskPriority>;
  isImportant?: Maybe<Boolean>;
  dueDate: DateTimeInput;
  reminderDate?: Maybe<DateTimeInput>;
  doSendMail?: Maybe<Boolean>;
  category: CategoryCreateOneWithoutTasksInput;
  account: AccountCreateOneWithoutTasksInput;
  steps?: Maybe<StepCreateManyWithoutTaskInput>;
  images?: Maybe<ImageCreateManyWithoutTaskInput>;
}

export interface CategoryUpdateManyWithWhereNestedInput {
  where: CategoryScalarWhereInput;
  data: CategoryUpdateManyDataInput;
}

export type StepWhereUniqueInput = AtLeastOne<{
  id: Maybe<UUID>;
}>;

export interface TaskUpdateWithoutCategoryDataInput {
  index?: Maybe<Int>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  status?: Maybe<TaskStatus>;
  priority?: Maybe<TaskPriority>;
  isImportant?: Maybe<Boolean>;
  dueDate?: Maybe<DateTimeInput>;
  reminderDate?: Maybe<DateTimeInput>;
  doSendMail?: Maybe<Boolean>;
  account?: Maybe<AccountUpdateOneRequiredWithoutTasksInput>;
  steps?: Maybe<StepUpdateManyWithoutTaskInput>;
  images?: Maybe<ImageUpdateManyWithoutTaskInput>;
}

export interface StepCreateInput {
  id?: Maybe<UUID>;
  index?: Maybe<Int>;
  title: String;
  status?: Maybe<StepStatus>;
  task: TaskCreateOneWithoutStepsInput;
  account: AccountCreateOneWithoutStepsInput;
}

export interface AccountUpdateOneRequiredWithoutTasksInput {
  create?: Maybe<AccountCreateWithoutTasksInput>;
  update?: Maybe<AccountUpdateWithoutTasksDataInput>;
  upsert?: Maybe<AccountUpsertWithoutTasksInput>;
  connect?: Maybe<AccountWhereUniqueInput>;
}

export type TaskWhereUniqueInput = AtLeastOne<{
  id: Maybe<UUID>;
}>;

export interface AccountUpdateWithoutTasksDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  role?: Maybe<Role>;
  status?: Maybe<AccountStatus>;
  users?: Maybe<UserUpdateManyWithoutAccountInput>;
  categories?: Maybe<CategoryUpdateManyWithoutAccountInput>;
  steps?: Maybe<StepUpdateManyWithoutAccountInput>;
  images?: Maybe<ImageUpdateManyWithoutAccountInput>;
}

export interface ImageCreateInput {
  id?: Maybe<UUID>;
  url: String;
  task: TaskCreateOneWithoutImagesInput;
  account: AccountCreateOneWithoutImagesInput;
}

export interface StepUpdateManyWithoutAccountInput {
  create?: Maybe<StepCreateWithoutAccountInput[] | StepCreateWithoutAccountInput>;
  delete?: Maybe<StepWhereUniqueInput[] | StepWhereUniqueInput>;
  connect?: Maybe<StepWhereUniqueInput[] | StepWhereUniqueInput>;
  set?: Maybe<StepWhereUniqueInput[] | StepWhereUniqueInput>;
  disconnect?: Maybe<StepWhereUniqueInput[] | StepWhereUniqueInput>;
  update?: Maybe<
    StepUpdateWithWhereUniqueWithoutAccountInput[] | StepUpdateWithWhereUniqueWithoutAccountInput
  >;
  upsert?: Maybe<
    StepUpsertWithWhereUniqueWithoutAccountInput[] | StepUpsertWithWhereUniqueWithoutAccountInput
  >;
  deleteMany?: Maybe<StepScalarWhereInput[] | StepScalarWhereInput>;
  updateMany?: Maybe<StepUpdateManyWithWhereNestedInput[] | StepUpdateManyWithWhereNestedInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<UUID>;
}>;

export interface StepUpdateWithWhereUniqueWithoutAccountInput {
  where: StepWhereUniqueInput;
  data: StepUpdateWithoutAccountDataInput;
}

export interface CategoryCreateInput {
  id?: Maybe<UUID>;
  index?: Maybe<Int>;
  name: String;
  account: AccountCreateOneWithoutCategoriesInput;
  tasks?: Maybe<TaskCreateManyWithoutCategoryInput>;
}

export interface StepUpdateWithoutAccountDataInput {
  index?: Maybe<Int>;
  title?: Maybe<String>;
  status?: Maybe<StepStatus>;
  task?: Maybe<TaskUpdateOneRequiredWithoutStepsInput>;
}

export interface CategoryUpdateManyDataInput {
  index?: Maybe<Int>;
  name?: Maybe<String>;
}

export interface StepWhereInput {
  id?: Maybe<UUID>;
  id_not?: Maybe<UUID>;
  id_in?: Maybe<UUID[] | UUID>;
  id_not_in?: Maybe<UUID[] | UUID>;
  id_lt?: Maybe<UUID>;
  id_lte?: Maybe<UUID>;
  id_gt?: Maybe<UUID>;
  id_gte?: Maybe<UUID>;
  id_contains?: Maybe<UUID>;
  id_not_contains?: Maybe<UUID>;
  id_starts_with?: Maybe<UUID>;
  id_not_starts_with?: Maybe<UUID>;
  id_ends_with?: Maybe<UUID>;
  id_not_ends_with?: Maybe<UUID>;
  index?: Maybe<Int>;
  index_not?: Maybe<Int>;
  index_in?: Maybe<Int[] | Int>;
  index_not_in?: Maybe<Int[] | Int>;
  index_lt?: Maybe<Int>;
  index_lte?: Maybe<Int>;
  index_gt?: Maybe<Int>;
  index_gte?: Maybe<Int>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  status?: Maybe<StepStatus>;
  status_not?: Maybe<StepStatus>;
  status_in?: Maybe<StepStatus[] | StepStatus>;
  status_not_in?: Maybe<StepStatus[] | StepStatus>;
  task?: Maybe<TaskWhereInput>;
  account?: Maybe<AccountWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<StepWhereInput[] | StepWhereInput>;
  OR?: Maybe<StepWhereInput[] | StepWhereInput>;
  NOT?: Maybe<StepWhereInput[] | StepWhereInput>;
}

export interface AccountCreateInput {
  id?: Maybe<UUID>;
  username: String;
  password: String;
  email: String;
  role?: Maybe<Role>;
  status?: Maybe<AccountStatus>;
  users?: Maybe<UserCreateManyWithoutAccountInput>;
  categories?: Maybe<CategoryCreateManyWithoutAccountInput>;
  tasks?: Maybe<TaskCreateManyWithoutAccountInput>;
  steps?: Maybe<StepCreateManyWithoutAccountInput>;
  images?: Maybe<ImageCreateManyWithoutAccountInput>;
}

export interface TaskUpdateWithoutStepsDataInput {
  index?: Maybe<Int>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  status?: Maybe<TaskStatus>;
  priority?: Maybe<TaskPriority>;
  isImportant?: Maybe<Boolean>;
  dueDate?: Maybe<DateTimeInput>;
  reminderDate?: Maybe<DateTimeInput>;
  doSendMail?: Maybe<Boolean>;
  category?: Maybe<CategoryUpdateOneRequiredWithoutTasksInput>;
  account?: Maybe<AccountUpdateOneRequiredWithoutTasksInput>;
  images?: Maybe<ImageUpdateManyWithoutTaskInput>;
}

export interface UserCreateWithoutAccountInput {
  id?: Maybe<UUID>;
  name: String;
  bio?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
}

export interface CategoryUpdateOneRequiredWithoutTasksInput {
  create?: Maybe<CategoryCreateWithoutTasksInput>;
  update?: Maybe<CategoryUpdateWithoutTasksDataInput>;
  upsert?: Maybe<CategoryUpsertWithoutTasksInput>;
  connect?: Maybe<CategoryWhereUniqueInput>;
}

export interface CategoryCreateWithoutAccountInput {
  id?: Maybe<UUID>;
  index?: Maybe<Int>;
  name: String;
  tasks?: Maybe<TaskCreateManyWithoutCategoryInput>;
}

export interface CategoryUpdateWithoutTasksDataInput {
  index?: Maybe<Int>;
  name?: Maybe<String>;
  account?: Maybe<AccountUpdateOneRequiredWithoutCategoriesInput>;
}

export interface TaskCreateWithoutCategoryInput {
  id?: Maybe<UUID>;
  index?: Maybe<Int>;
  title: String;
  content?: Maybe<String>;
  status?: Maybe<TaskStatus>;
  priority?: Maybe<TaskPriority>;
  isImportant?: Maybe<Boolean>;
  dueDate: DateTimeInput;
  reminderDate?: Maybe<DateTimeInput>;
  doSendMail?: Maybe<Boolean>;
  account: AccountCreateOneWithoutTasksInput;
  steps?: Maybe<StepCreateManyWithoutTaskInput>;
  images?: Maybe<ImageCreateManyWithoutTaskInput>;
}

export interface AccountUpdateOneRequiredWithoutCategoriesInput {
  create?: Maybe<AccountCreateWithoutCategoriesInput>;
  update?: Maybe<AccountUpdateWithoutCategoriesDataInput>;
  upsert?: Maybe<AccountUpsertWithoutCategoriesInput>;
  connect?: Maybe<AccountWhereUniqueInput>;
}

export interface AccountCreateWithoutTasksInput {
  id?: Maybe<UUID>;
  username: String;
  password: String;
  email: String;
  role?: Maybe<Role>;
  status?: Maybe<AccountStatus>;
  users?: Maybe<UserCreateManyWithoutAccountInput>;
  categories?: Maybe<CategoryCreateManyWithoutAccountInput>;
  steps?: Maybe<StepCreateManyWithoutAccountInput>;
  images?: Maybe<ImageCreateManyWithoutAccountInput>;
}

export interface AccountUpdateWithoutCategoriesDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  role?: Maybe<Role>;
  status?: Maybe<AccountStatus>;
  users?: Maybe<UserUpdateManyWithoutAccountInput>;
  tasks?: Maybe<TaskUpdateManyWithoutAccountInput>;
  steps?: Maybe<StepUpdateManyWithoutAccountInput>;
  images?: Maybe<ImageUpdateManyWithoutAccountInput>;
}

export interface StepCreateWithoutAccountInput {
  id?: Maybe<UUID>;
  index?: Maybe<Int>;
  title: String;
  status?: Maybe<StepStatus>;
  task: TaskCreateOneWithoutStepsInput;
}

export interface TaskUpdateManyWithoutAccountInput {
  create?: Maybe<TaskCreateWithoutAccountInput[] | TaskCreateWithoutAccountInput>;
  delete?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  connect?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  set?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  disconnect?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  update?: Maybe<
    TaskUpdateWithWhereUniqueWithoutAccountInput[] | TaskUpdateWithWhereUniqueWithoutAccountInput
  >;
  upsert?: Maybe<
    TaskUpsertWithWhereUniqueWithoutAccountInput[] | TaskUpsertWithWhereUniqueWithoutAccountInput
  >;
  deleteMany?: Maybe<TaskScalarWhereInput[] | TaskScalarWhereInput>;
  updateMany?: Maybe<TaskUpdateManyWithWhereNestedInput[] | TaskUpdateManyWithWhereNestedInput>;
}

export interface TaskCreateWithoutStepsInput {
  id?: Maybe<UUID>;
  index?: Maybe<Int>;
  title: String;
  content?: Maybe<String>;
  status?: Maybe<TaskStatus>;
  priority?: Maybe<TaskPriority>;
  isImportant?: Maybe<Boolean>;
  dueDate: DateTimeInput;
  reminderDate?: Maybe<DateTimeInput>;
  doSendMail?: Maybe<Boolean>;
  category: CategoryCreateOneWithoutTasksInput;
  account: AccountCreateOneWithoutTasksInput;
  images?: Maybe<ImageCreateManyWithoutTaskInput>;
}

export interface TaskUpdateWithWhereUniqueWithoutAccountInput {
  where: TaskWhereUniqueInput;
  data: TaskUpdateWithoutAccountDataInput;
}

export interface CategoryCreateWithoutTasksInput {
  id?: Maybe<UUID>;
  index?: Maybe<Int>;
  name: String;
  account: AccountCreateOneWithoutCategoriesInput;
}

export interface TaskUpdateWithoutAccountDataInput {
  index?: Maybe<Int>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  status?: Maybe<TaskStatus>;
  priority?: Maybe<TaskPriority>;
  isImportant?: Maybe<Boolean>;
  dueDate?: Maybe<DateTimeInput>;
  reminderDate?: Maybe<DateTimeInput>;
  doSendMail?: Maybe<Boolean>;
  category?: Maybe<CategoryUpdateOneRequiredWithoutTasksInput>;
  steps?: Maybe<StepUpdateManyWithoutTaskInput>;
  images?: Maybe<ImageUpdateManyWithoutTaskInput>;
}

export interface AccountCreateWithoutCategoriesInput {
  id?: Maybe<UUID>;
  username: String;
  password: String;
  email: String;
  role?: Maybe<Role>;
  status?: Maybe<AccountStatus>;
  users?: Maybe<UserCreateManyWithoutAccountInput>;
  tasks?: Maybe<TaskCreateManyWithoutAccountInput>;
  steps?: Maybe<StepCreateManyWithoutAccountInput>;
  images?: Maybe<ImageCreateManyWithoutAccountInput>;
}

export interface StepUpdateManyWithoutTaskInput {
  create?: Maybe<StepCreateWithoutTaskInput[] | StepCreateWithoutTaskInput>;
  delete?: Maybe<StepWhereUniqueInput[] | StepWhereUniqueInput>;
  connect?: Maybe<StepWhereUniqueInput[] | StepWhereUniqueInput>;
  set?: Maybe<StepWhereUniqueInput[] | StepWhereUniqueInput>;
  disconnect?: Maybe<StepWhereUniqueInput[] | StepWhereUniqueInput>;
  update?: Maybe<
    StepUpdateWithWhereUniqueWithoutTaskInput[] | StepUpdateWithWhereUniqueWithoutTaskInput
  >;
  upsert?: Maybe<
    StepUpsertWithWhereUniqueWithoutTaskInput[] | StepUpsertWithWhereUniqueWithoutTaskInput
  >;
  deleteMany?: Maybe<StepScalarWhereInput[] | StepScalarWhereInput>;
  updateMany?: Maybe<StepUpdateManyWithWhereNestedInput[] | StepUpdateManyWithWhereNestedInput>;
}

export interface TaskCreateWithoutAccountInput {
  id?: Maybe<UUID>;
  index?: Maybe<Int>;
  title: String;
  content?: Maybe<String>;
  status?: Maybe<TaskStatus>;
  priority?: Maybe<TaskPriority>;
  isImportant?: Maybe<Boolean>;
  dueDate: DateTimeInput;
  reminderDate?: Maybe<DateTimeInput>;
  doSendMail?: Maybe<Boolean>;
  category: CategoryCreateOneWithoutTasksInput;
  steps?: Maybe<StepCreateManyWithoutTaskInput>;
  images?: Maybe<ImageCreateManyWithoutTaskInput>;
}

export interface StepUpdateWithWhereUniqueWithoutTaskInput {
  where: StepWhereUniqueInput;
  data: StepUpdateWithoutTaskDataInput;
}

export interface StepCreateWithoutTaskInput {
  id?: Maybe<UUID>;
  index?: Maybe<Int>;
  title: String;
  status?: Maybe<StepStatus>;
  account: AccountCreateOneWithoutStepsInput;
}

export interface StepUpdateWithoutTaskDataInput {
  index?: Maybe<Int>;
  title?: Maybe<String>;
  status?: Maybe<StepStatus>;
  account?: Maybe<AccountUpdateOneRequiredWithoutStepsInput>;
}

export interface AccountCreateWithoutStepsInput {
  id?: Maybe<UUID>;
  username: String;
  password: String;
  email: String;
  role?: Maybe<Role>;
  status?: Maybe<AccountStatus>;
  users?: Maybe<UserCreateManyWithoutAccountInput>;
  categories?: Maybe<CategoryCreateManyWithoutAccountInput>;
  tasks?: Maybe<TaskCreateManyWithoutAccountInput>;
  images?: Maybe<ImageCreateManyWithoutAccountInput>;
}

export interface AccountUpdateOneRequiredWithoutStepsInput {
  create?: Maybe<AccountCreateWithoutStepsInput>;
  update?: Maybe<AccountUpdateWithoutStepsDataInput>;
  upsert?: Maybe<AccountUpsertWithoutStepsInput>;
  connect?: Maybe<AccountWhereUniqueInput>;
}

export interface ImageCreateWithoutAccountInput {
  id?: Maybe<UUID>;
  url: String;
  task: TaskCreateOneWithoutImagesInput;
}

export interface AccountUpdateWithoutStepsDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  role?: Maybe<Role>;
  status?: Maybe<AccountStatus>;
  users?: Maybe<UserUpdateManyWithoutAccountInput>;
  categories?: Maybe<CategoryUpdateManyWithoutAccountInput>;
  tasks?: Maybe<TaskUpdateManyWithoutAccountInput>;
  images?: Maybe<ImageUpdateManyWithoutAccountInput>;
}

export interface TaskCreateWithoutImagesInput {
  id?: Maybe<UUID>;
  index?: Maybe<Int>;
  title: String;
  content?: Maybe<String>;
  status?: Maybe<TaskStatus>;
  priority?: Maybe<TaskPriority>;
  isImportant?: Maybe<Boolean>;
  dueDate: DateTimeInput;
  reminderDate?: Maybe<DateTimeInput>;
  doSendMail?: Maybe<Boolean>;
  category: CategoryCreateOneWithoutTasksInput;
  account: AccountCreateOneWithoutTasksInput;
  steps?: Maybe<StepCreateManyWithoutTaskInput>;
}

export interface ImageUpdateManyWithoutAccountInput {
  create?: Maybe<ImageCreateWithoutAccountInput[] | ImageCreateWithoutAccountInput>;
  delete?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  connect?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  set?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  disconnect?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  update?: Maybe<
    ImageUpdateWithWhereUniqueWithoutAccountInput[] | ImageUpdateWithWhereUniqueWithoutAccountInput
  >;
  upsert?: Maybe<
    ImageUpsertWithWhereUniqueWithoutAccountInput[] | ImageUpsertWithWhereUniqueWithoutAccountInput
  >;
  deleteMany?: Maybe<ImageScalarWhereInput[] | ImageScalarWhereInput>;
  updateMany?: Maybe<ImageUpdateManyWithWhereNestedInput[] | ImageUpdateManyWithWhereNestedInput>;
}

export interface ImageCreateWithoutTaskInput {
  id?: Maybe<UUID>;
  url: String;
  account: AccountCreateOneWithoutImagesInput;
}

export interface ImageUpdateWithWhereUniqueWithoutAccountInput {
  where: ImageWhereUniqueInput;
  data: ImageUpdateWithoutAccountDataInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface ImageUpdateWithoutAccountDataInput {
  url?: Maybe<String>;
  task?: Maybe<TaskUpdateOneRequiredWithoutImagesInput>;
}

export interface AccountWhereInput {
  id?: Maybe<UUID>;
  id_not?: Maybe<UUID>;
  id_in?: Maybe<UUID[] | UUID>;
  id_not_in?: Maybe<UUID[] | UUID>;
  id_lt?: Maybe<UUID>;
  id_lte?: Maybe<UUID>;
  id_gt?: Maybe<UUID>;
  id_gte?: Maybe<UUID>;
  id_contains?: Maybe<UUID>;
  id_not_contains?: Maybe<UUID>;
  id_starts_with?: Maybe<UUID>;
  id_not_starts_with?: Maybe<UUID>;
  id_ends_with?: Maybe<UUID>;
  id_not_ends_with?: Maybe<UUID>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  status?: Maybe<AccountStatus>;
  status_not?: Maybe<AccountStatus>;
  status_in?: Maybe<AccountStatus[] | AccountStatus>;
  status_not_in?: Maybe<AccountStatus[] | AccountStatus>;
  users_every?: Maybe<UserWhereInput>;
  users_some?: Maybe<UserWhereInput>;
  users_none?: Maybe<UserWhereInput>;
  categories_every?: Maybe<CategoryWhereInput>;
  categories_some?: Maybe<CategoryWhereInput>;
  categories_none?: Maybe<CategoryWhereInput>;
  tasks_every?: Maybe<TaskWhereInput>;
  tasks_some?: Maybe<TaskWhereInput>;
  tasks_none?: Maybe<TaskWhereInput>;
  steps_every?: Maybe<StepWhereInput>;
  steps_some?: Maybe<StepWhereInput>;
  steps_none?: Maybe<StepWhereInput>;
  images_every?: Maybe<ImageWhereInput>;
  images_some?: Maybe<ImageWhereInput>;
  images_none?: Maybe<ImageWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AccountWhereInput[] | AccountWhereInput>;
  OR?: Maybe<AccountWhereInput[] | AccountWhereInput>;
  NOT?: Maybe<AccountWhereInput[] | AccountWhereInput>;
}

export interface TaskUpdateOneRequiredWithoutImagesInput {
  create?: Maybe<TaskCreateWithoutImagesInput>;
  update?: Maybe<TaskUpdateWithoutImagesDataInput>;
  upsert?: Maybe<TaskUpsertWithoutImagesInput>;
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface UserWhereInput {
  id?: Maybe<UUID>;
  id_not?: Maybe<UUID>;
  id_in?: Maybe<UUID[] | UUID>;
  id_not_in?: Maybe<UUID[] | UUID>;
  id_lt?: Maybe<UUID>;
  id_lte?: Maybe<UUID>;
  id_gt?: Maybe<UUID>;
  id_gte?: Maybe<UUID>;
  id_contains?: Maybe<UUID>;
  id_not_contains?: Maybe<UUID>;
  id_starts_with?: Maybe<UUID>;
  id_not_starts_with?: Maybe<UUID>;
  id_ends_with?: Maybe<UUID>;
  id_not_ends_with?: Maybe<UUID>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  bio?: Maybe<String>;
  bio_not?: Maybe<String>;
  bio_in?: Maybe<String[] | String>;
  bio_not_in?: Maybe<String[] | String>;
  bio_lt?: Maybe<String>;
  bio_lte?: Maybe<String>;
  bio_gt?: Maybe<String>;
  bio_gte?: Maybe<String>;
  bio_contains?: Maybe<String>;
  bio_not_contains?: Maybe<String>;
  bio_starts_with?: Maybe<String>;
  bio_not_starts_with?: Maybe<String>;
  bio_ends_with?: Maybe<String>;
  bio_not_ends_with?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  dob_not?: Maybe<DateTimeInput>;
  dob_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dob_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dob_lt?: Maybe<DateTimeInput>;
  dob_lte?: Maybe<DateTimeInput>;
  dob_gt?: Maybe<DateTimeInput>;
  dob_gte?: Maybe<DateTimeInput>;
  account?: Maybe<AccountWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface TaskUpdateWithoutImagesDataInput {
  index?: Maybe<Int>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  status?: Maybe<TaskStatus>;
  priority?: Maybe<TaskPriority>;
  isImportant?: Maybe<Boolean>;
  dueDate?: Maybe<DateTimeInput>;
  reminderDate?: Maybe<DateTimeInput>;
  doSendMail?: Maybe<Boolean>;
  category?: Maybe<CategoryUpdateOneRequiredWithoutTasksInput>;
  account?: Maybe<AccountUpdateOneRequiredWithoutTasksInput>;
  steps?: Maybe<StepUpdateManyWithoutTaskInput>;
}

export interface AccountUpdateOneRequiredWithoutUsersInput {
  create?: Maybe<AccountCreateWithoutUsersInput>;
  update?: Maybe<AccountUpdateWithoutUsersDataInput>;
  upsert?: Maybe<AccountUpsertWithoutUsersInput>;
  connect?: Maybe<AccountWhereUniqueInput>;
}

export interface TaskUpsertWithoutImagesInput {
  update: TaskUpdateWithoutImagesDataInput;
  create: TaskCreateWithoutImagesInput;
}

export interface AccountCreateOneWithoutUsersInput {
  create?: Maybe<AccountCreateWithoutUsersInput>;
  connect?: Maybe<AccountWhereUniqueInput>;
}

export interface ImageUpsertWithWhereUniqueWithoutAccountInput {
  where: ImageWhereUniqueInput;
  update: ImageUpdateWithoutAccountDataInput;
  create: ImageCreateWithoutAccountInput;
}

export interface TaskUpdateInput {
  index?: Maybe<Int>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  status?: Maybe<TaskStatus>;
  priority?: Maybe<TaskPriority>;
  isImportant?: Maybe<Boolean>;
  dueDate?: Maybe<DateTimeInput>;
  reminderDate?: Maybe<DateTimeInput>;
  doSendMail?: Maybe<Boolean>;
  category?: Maybe<CategoryUpdateOneRequiredWithoutTasksInput>;
  account?: Maybe<AccountUpdateOneRequiredWithoutTasksInput>;
  steps?: Maybe<StepUpdateManyWithoutTaskInput>;
  images?: Maybe<ImageUpdateManyWithoutTaskInput>;
}

export interface ImageScalarWhereInput {
  id?: Maybe<UUID>;
  id_not?: Maybe<UUID>;
  id_in?: Maybe<UUID[] | UUID>;
  id_not_in?: Maybe<UUID[] | UUID>;
  id_lt?: Maybe<UUID>;
  id_lte?: Maybe<UUID>;
  id_gt?: Maybe<UUID>;
  id_gte?: Maybe<UUID>;
  id_contains?: Maybe<UUID>;
  id_not_contains?: Maybe<UUID>;
  id_starts_with?: Maybe<UUID>;
  id_not_starts_with?: Maybe<UUID>;
  id_ends_with?: Maybe<UUID>;
  id_not_ends_with?: Maybe<UUID>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ImageScalarWhereInput[] | ImageScalarWhereInput>;
  OR?: Maybe<ImageScalarWhereInput[] | ImageScalarWhereInput>;
  NOT?: Maybe<ImageScalarWhereInput[] | ImageScalarWhereInput>;
}

export interface StepUpdateInput {
  index?: Maybe<Int>;
  title?: Maybe<String>;
  status?: Maybe<StepStatus>;
  task?: Maybe<TaskUpdateOneRequiredWithoutStepsInput>;
  account?: Maybe<AccountUpdateOneRequiredWithoutStepsInput>;
}

export interface ImageUpdateManyWithWhereNestedInput {
  where: ImageScalarWhereInput;
  data: ImageUpdateManyDataInput;
}

export interface ImageUpdateInput {
  url?: Maybe<String>;
  task?: Maybe<TaskUpdateOneRequiredWithoutImagesInput>;
  account?: Maybe<AccountUpdateOneRequiredWithoutImagesInput>;
}

export interface ImageUpdateManyDataInput {
  url?: Maybe<String>;
}

export interface CategoryUpdateInput {
  index?: Maybe<Int>;
  name?: Maybe<String>;
  account?: Maybe<AccountUpdateOneRequiredWithoutCategoriesInput>;
  tasks?: Maybe<TaskUpdateManyWithoutCategoryInput>;
}

export interface AccountUpsertWithoutStepsInput {
  update: AccountUpdateWithoutStepsDataInput;
  create: AccountCreateWithoutStepsInput;
}

export interface CategoryCreateManyWithoutAccountInput {
  create?: Maybe<CategoryCreateWithoutAccountInput[] | CategoryCreateWithoutAccountInput>;
  connect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
}

export interface StepUpsertWithWhereUniqueWithoutTaskInput {
  where: StepWhereUniqueInput;
  update: StepUpdateWithoutTaskDataInput;
  create: StepCreateWithoutTaskInput;
}

export interface AccountCreateOneWithoutTasksInput {
  create?: Maybe<AccountCreateWithoutTasksInput>;
  connect?: Maybe<AccountWhereUniqueInput>;
}

export interface StepScalarWhereInput {
  id?: Maybe<UUID>;
  id_not?: Maybe<UUID>;
  id_in?: Maybe<UUID[] | UUID>;
  id_not_in?: Maybe<UUID[] | UUID>;
  id_lt?: Maybe<UUID>;
  id_lte?: Maybe<UUID>;
  id_gt?: Maybe<UUID>;
  id_gte?: Maybe<UUID>;
  id_contains?: Maybe<UUID>;
  id_not_contains?: Maybe<UUID>;
  id_starts_with?: Maybe<UUID>;
  id_not_starts_with?: Maybe<UUID>;
  id_ends_with?: Maybe<UUID>;
  id_not_ends_with?: Maybe<UUID>;
  index?: Maybe<Int>;
  index_not?: Maybe<Int>;
  index_in?: Maybe<Int[] | Int>;
  index_not_in?: Maybe<Int[] | Int>;
  index_lt?: Maybe<Int>;
  index_lte?: Maybe<Int>;
  index_gt?: Maybe<Int>;
  index_gte?: Maybe<Int>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  status?: Maybe<StepStatus>;
  status_not?: Maybe<StepStatus>;
  status_in?: Maybe<StepStatus[] | StepStatus>;
  status_not_in?: Maybe<StepStatus[] | StepStatus>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<StepScalarWhereInput[] | StepScalarWhereInput>;
  OR?: Maybe<StepScalarWhereInput[] | StepScalarWhereInput>;
  NOT?: Maybe<StepScalarWhereInput[] | StepScalarWhereInput>;
}

export interface TaskCreateOneWithoutStepsInput {
  create?: Maybe<TaskCreateWithoutStepsInput>;
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface StepUpdateManyWithWhereNestedInput {
  where: StepScalarWhereInput;
  data: StepUpdateManyDataInput;
}

export interface AccountCreateOneWithoutCategoriesInput {
  create?: Maybe<AccountCreateWithoutCategoriesInput>;
  connect?: Maybe<AccountWhereUniqueInput>;
}

export interface StepUpdateManyDataInput {
  index?: Maybe<Int>;
  title?: Maybe<String>;
  status?: Maybe<StepStatus>;
}

export interface StepCreateManyWithoutTaskInput {
  create?: Maybe<StepCreateWithoutTaskInput[] | StepCreateWithoutTaskInput>;
  connect?: Maybe<StepWhereUniqueInput[] | StepWhereUniqueInput>;
}

export interface ImageUpdateManyWithoutTaskInput {
  create?: Maybe<ImageCreateWithoutTaskInput[] | ImageCreateWithoutTaskInput>;
  delete?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  connect?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  set?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  disconnect?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  update?: Maybe<
    ImageUpdateWithWhereUniqueWithoutTaskInput[] | ImageUpdateWithWhereUniqueWithoutTaskInput
  >;
  upsert?: Maybe<
    ImageUpsertWithWhereUniqueWithoutTaskInput[] | ImageUpsertWithWhereUniqueWithoutTaskInput
  >;
  deleteMany?: Maybe<ImageScalarWhereInput[] | ImageScalarWhereInput>;
  updateMany?: Maybe<ImageUpdateManyWithWhereNestedInput[] | ImageUpdateManyWithWhereNestedInput>;
}

export interface ImageCreateManyWithoutAccountInput {
  create?: Maybe<ImageCreateWithoutAccountInput[] | ImageCreateWithoutAccountInput>;
  connect?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
}

export interface ImageUpdateWithWhereUniqueWithoutTaskInput {
  where: ImageWhereUniqueInput;
  data: ImageUpdateWithoutTaskDataInput;
}

export interface ImageCreateManyWithoutTaskInput {
  create?: Maybe<ImageCreateWithoutTaskInput[] | ImageCreateWithoutTaskInput>;
  connect?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
}

export interface ImageUpdateWithoutTaskDataInput {
  url?: Maybe<String>;
  account?: Maybe<AccountUpdateOneRequiredWithoutImagesInput>;
}

export interface CategoryWhereInput {
  id?: Maybe<UUID>;
  id_not?: Maybe<UUID>;
  id_in?: Maybe<UUID[] | UUID>;
  id_not_in?: Maybe<UUID[] | UUID>;
  id_lt?: Maybe<UUID>;
  id_lte?: Maybe<UUID>;
  id_gt?: Maybe<UUID>;
  id_gte?: Maybe<UUID>;
  id_contains?: Maybe<UUID>;
  id_not_contains?: Maybe<UUID>;
  id_starts_with?: Maybe<UUID>;
  id_not_starts_with?: Maybe<UUID>;
  id_ends_with?: Maybe<UUID>;
  id_not_ends_with?: Maybe<UUID>;
  index?: Maybe<Int>;
  index_not?: Maybe<Int>;
  index_in?: Maybe<Int[] | Int>;
  index_not_in?: Maybe<Int[] | Int>;
  index_lt?: Maybe<Int>;
  index_lte?: Maybe<Int>;
  index_gt?: Maybe<Int>;
  index_gte?: Maybe<Int>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  account?: Maybe<AccountWhereInput>;
  tasks_every?: Maybe<TaskWhereInput>;
  tasks_some?: Maybe<TaskWhereInput>;
  tasks_none?: Maybe<TaskWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
  OR?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
  NOT?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
}

export interface AccountUpdateOneRequiredWithoutImagesInput {
  create?: Maybe<AccountCreateWithoutImagesInput>;
  update?: Maybe<AccountUpdateWithoutImagesDataInput>;
  upsert?: Maybe<AccountUpsertWithoutImagesInput>;
  connect?: Maybe<AccountWhereUniqueInput>;
}

export interface AccountUpsertWithoutUsersInput {
  update: AccountUpdateWithoutUsersDataInput;
  create: AccountCreateWithoutUsersInput;
}

export interface AccountUpdateWithoutImagesDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  role?: Maybe<Role>;
  status?: Maybe<AccountStatus>;
  users?: Maybe<UserUpdateManyWithoutAccountInput>;
  categories?: Maybe<CategoryUpdateManyWithoutAccountInput>;
  tasks?: Maybe<TaskUpdateManyWithoutAccountInput>;
  steps?: Maybe<StepUpdateManyWithoutAccountInput>;
}

export interface TaskUpdateManyMutationInput {
  index?: Maybe<Int>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  status?: Maybe<TaskStatus>;
  priority?: Maybe<TaskPriority>;
  isImportant?: Maybe<Boolean>;
  dueDate?: Maybe<DateTimeInput>;
  reminderDate?: Maybe<DateTimeInput>;
  doSendMail?: Maybe<Boolean>;
}

export interface AccountUpsertWithoutImagesInput {
  update: AccountUpdateWithoutImagesDataInput;
  create: AccountCreateWithoutImagesInput;
}

export interface ImageUpdateManyMutationInput {
  url?: Maybe<String>;
}

export interface ImageUpsertWithWhereUniqueWithoutTaskInput {
  where: ImageWhereUniqueInput;
  update: ImageUpdateWithoutTaskDataInput;
  create: ImageCreateWithoutTaskInput;
}

export interface AccountUpdateManyMutationInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  role?: Maybe<Role>;
  status?: Maybe<AccountStatus>;
}

export interface TaskUpsertWithWhereUniqueWithoutAccountInput {
  where: TaskWhereUniqueInput;
  update: TaskUpdateWithoutAccountDataInput;
  create: TaskCreateWithoutAccountInput;
}

export interface TaskCreateManyWithoutCategoryInput {
  create?: Maybe<TaskCreateWithoutCategoryInput[] | TaskCreateWithoutCategoryInput>;
  connect?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
}

export interface TaskScalarWhereInput {
  id?: Maybe<UUID>;
  id_not?: Maybe<UUID>;
  id_in?: Maybe<UUID[] | UUID>;
  id_not_in?: Maybe<UUID[] | UUID>;
  id_lt?: Maybe<UUID>;
  id_lte?: Maybe<UUID>;
  id_gt?: Maybe<UUID>;
  id_gte?: Maybe<UUID>;
  id_contains?: Maybe<UUID>;
  id_not_contains?: Maybe<UUID>;
  id_starts_with?: Maybe<UUID>;
  id_not_starts_with?: Maybe<UUID>;
  id_ends_with?: Maybe<UUID>;
  id_not_ends_with?: Maybe<UUID>;
  index?: Maybe<Int>;
  index_not?: Maybe<Int>;
  index_in?: Maybe<Int[] | Int>;
  index_not_in?: Maybe<Int[] | Int>;
  index_lt?: Maybe<Int>;
  index_lte?: Maybe<Int>;
  index_gt?: Maybe<Int>;
  index_gte?: Maybe<Int>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  status?: Maybe<TaskStatus>;
  status_not?: Maybe<TaskStatus>;
  status_in?: Maybe<TaskStatus[] | TaskStatus>;
  status_not_in?: Maybe<TaskStatus[] | TaskStatus>;
  priority?: Maybe<TaskPriority>;
  priority_not?: Maybe<TaskPriority>;
  priority_in?: Maybe<TaskPriority[] | TaskPriority>;
  priority_not_in?: Maybe<TaskPriority[] | TaskPriority>;
  isImportant?: Maybe<Boolean>;
  isImportant_not?: Maybe<Boolean>;
  dueDate?: Maybe<DateTimeInput>;
  dueDate_not?: Maybe<DateTimeInput>;
  dueDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dueDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dueDate_lt?: Maybe<DateTimeInput>;
  dueDate_lte?: Maybe<DateTimeInput>;
  dueDate_gt?: Maybe<DateTimeInput>;
  dueDate_gte?: Maybe<DateTimeInput>;
  reminderDate?: Maybe<DateTimeInput>;
  reminderDate_not?: Maybe<DateTimeInput>;
  reminderDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  reminderDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  reminderDate_lt?: Maybe<DateTimeInput>;
  reminderDate_lte?: Maybe<DateTimeInput>;
  reminderDate_gt?: Maybe<DateTimeInput>;
  reminderDate_gte?: Maybe<DateTimeInput>;
  doSendMail?: Maybe<Boolean>;
  doSendMail_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TaskScalarWhereInput[] | TaskScalarWhereInput>;
  OR?: Maybe<TaskScalarWhereInput[] | TaskScalarWhereInput>;
  NOT?: Maybe<TaskScalarWhereInput[] | TaskScalarWhereInput>;
}

export interface CategoryCreateOneWithoutTasksInput {
  create?: Maybe<CategoryCreateWithoutTasksInput>;
  connect?: Maybe<CategoryWhereUniqueInput>;
}

export interface TaskUpdateManyWithWhereNestedInput {
  where: TaskScalarWhereInput;
  data: TaskUpdateManyDataInput;
}

export interface AccountCreateOneWithoutStepsInput {
  create?: Maybe<AccountCreateWithoutStepsInput>;
  connect?: Maybe<AccountWhereUniqueInput>;
}

export interface TaskUpdateManyDataInput {
  index?: Maybe<Int>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  status?: Maybe<TaskStatus>;
  priority?: Maybe<TaskPriority>;
  isImportant?: Maybe<Boolean>;
  dueDate?: Maybe<DateTimeInput>;
  reminderDate?: Maybe<DateTimeInput>;
  doSendMail?: Maybe<Boolean>;
}

export interface TaskWhereInput {
  id?: Maybe<UUID>;
  id_not?: Maybe<UUID>;
  id_in?: Maybe<UUID[] | UUID>;
  id_not_in?: Maybe<UUID[] | UUID>;
  id_lt?: Maybe<UUID>;
  id_lte?: Maybe<UUID>;
  id_gt?: Maybe<UUID>;
  id_gte?: Maybe<UUID>;
  id_contains?: Maybe<UUID>;
  id_not_contains?: Maybe<UUID>;
  id_starts_with?: Maybe<UUID>;
  id_not_starts_with?: Maybe<UUID>;
  id_ends_with?: Maybe<UUID>;
  id_not_ends_with?: Maybe<UUID>;
  index?: Maybe<Int>;
  index_not?: Maybe<Int>;
  index_in?: Maybe<Int[] | Int>;
  index_not_in?: Maybe<Int[] | Int>;
  index_lt?: Maybe<Int>;
  index_lte?: Maybe<Int>;
  index_gt?: Maybe<Int>;
  index_gte?: Maybe<Int>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  status?: Maybe<TaskStatus>;
  status_not?: Maybe<TaskStatus>;
  status_in?: Maybe<TaskStatus[] | TaskStatus>;
  status_not_in?: Maybe<TaskStatus[] | TaskStatus>;
  priority?: Maybe<TaskPriority>;
  priority_not?: Maybe<TaskPriority>;
  priority_in?: Maybe<TaskPriority[] | TaskPriority>;
  priority_not_in?: Maybe<TaskPriority[] | TaskPriority>;
  isImportant?: Maybe<Boolean>;
  isImportant_not?: Maybe<Boolean>;
  dueDate?: Maybe<DateTimeInput>;
  dueDate_not?: Maybe<DateTimeInput>;
  dueDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dueDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dueDate_lt?: Maybe<DateTimeInput>;
  dueDate_lte?: Maybe<DateTimeInput>;
  dueDate_gt?: Maybe<DateTimeInput>;
  dueDate_gte?: Maybe<DateTimeInput>;
  reminderDate?: Maybe<DateTimeInput>;
  reminderDate_not?: Maybe<DateTimeInput>;
  reminderDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  reminderDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  reminderDate_lt?: Maybe<DateTimeInput>;
  reminderDate_lte?: Maybe<DateTimeInput>;
  reminderDate_gt?: Maybe<DateTimeInput>;
  reminderDate_gte?: Maybe<DateTimeInput>;
  doSendMail?: Maybe<Boolean>;
  doSendMail_not?: Maybe<Boolean>;
  category?: Maybe<CategoryWhereInput>;
  account?: Maybe<AccountWhereInput>;
  steps_every?: Maybe<StepWhereInput>;
  steps_some?: Maybe<StepWhereInput>;
  steps_none?: Maybe<StepWhereInput>;
  images_every?: Maybe<ImageWhereInput>;
  images_some?: Maybe<ImageWhereInput>;
  images_none?: Maybe<ImageWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TaskWhereInput[] | TaskWhereInput>;
  OR?: Maybe<TaskWhereInput[] | TaskWhereInput>;
  NOT?: Maybe<TaskWhereInput[] | TaskWhereInput>;
}

export interface AccountUpsertWithoutCategoriesInput {
  update: AccountUpdateWithoutCategoriesDataInput;
  create: AccountCreateWithoutCategoriesInput;
}

export interface AccountCreateWithoutUsersInput {
  id?: Maybe<UUID>;
  username: String;
  password: String;
  email: String;
  role?: Maybe<Role>;
  status?: Maybe<AccountStatus>;
  categories?: Maybe<CategoryCreateManyWithoutAccountInput>;
  tasks?: Maybe<TaskCreateManyWithoutAccountInput>;
  steps?: Maybe<StepCreateManyWithoutAccountInput>;
  images?: Maybe<ImageCreateManyWithoutAccountInput>;
}

export interface CategoryUpsertWithoutTasksInput {
  update: CategoryUpdateWithoutTasksDataInput;
  create: CategoryCreateWithoutTasksInput;
}

export interface CategoryUpdateManyMutationInput {
  index?: Maybe<Int>;
  name?: Maybe<String>;
}

export interface TaskUpsertWithoutStepsInput {
  update: TaskUpdateWithoutStepsDataInput;
  create: TaskCreateWithoutStepsInput;
}

export interface StepCreateManyWithoutAccountInput {
  create?: Maybe<StepCreateWithoutAccountInput[] | StepCreateWithoutAccountInput>;
  connect?: Maybe<StepWhereUniqueInput[] | StepWhereUniqueInput>;
}

export interface CategoryUpsertWithWhereUniqueWithoutAccountInput {
  where: CategoryWhereUniqueInput;
  update: CategoryUpdateWithoutAccountDataInput;
  create: CategoryCreateWithoutAccountInput;
}

export interface TaskUpsertWithWhereUniqueWithoutCategoryInput {
  where: TaskWhereUniqueInput;
  update: TaskUpdateWithoutCategoryDataInput;
  create: TaskCreateWithoutCategoryInput;
}

export interface AccountUpsertWithoutTasksInput {
  update: AccountUpdateWithoutTasksDataInput;
  create: AccountCreateWithoutTasksInput;
}

export interface StepUpsertWithWhereUniqueWithoutAccountInput {
  where: StepWhereUniqueInput;
  update: StepUpdateWithoutAccountDataInput;
  create: StepCreateWithoutAccountInput;
}

export interface TaskCreateManyWithoutAccountInput {
  create?: Maybe<TaskCreateWithoutAccountInput[] | TaskCreateWithoutAccountInput>;
  connect?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
}

export interface UserCreateManyWithoutAccountInput {
  create?: Maybe<UserCreateWithoutAccountInput[] | UserCreateWithoutAccountInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface StepUpdateManyMutationInput {
  index?: Maybe<Int>;
  title?: Maybe<String>;
  status?: Maybe<StepStatus>;
}

export interface CategorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CategoryWhereInput>;
  AND?: Maybe<CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput>;
  OR?: Maybe<CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput>;
  NOT?: Maybe<CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput>;
}

export interface TaskCreateOneWithoutImagesInput {
  create?: Maybe<TaskCreateWithoutImagesInput>;
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: UUID;
  name: String;
  bio?: String;
  dob?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise extends Promise<UserPreviousValues>, Fragmentable {
  id: () => Promise<UUID>;
  name: () => Promise<String>;
  bio: () => Promise<String>;
  dob: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  name: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
  dob: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateAccount {
  count: Int;
}

export interface AggregateAccountPromise extends Promise<AggregateAccount>, Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAccountSubscription
  extends Promise<AsyncIterator<AggregateAccount>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StepPreviousValues {
  id: UUID;
  index?: Int;
  title: String;
  status?: StepStatus;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface StepPreviousValuesPromise extends Promise<StepPreviousValues>, Fragmentable {
  id: () => Promise<UUID>;
  index: () => Promise<Int>;
  title: () => Promise<String>;
  status: () => Promise<StepStatus>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface StepPreviousValuesSubscription
  extends Promise<AsyncIterator<StepPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  index: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<StepStatus>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AccountEdge {
  node: Account;
  cursor: String;
}

export interface AccountEdgePromise extends Promise<AccountEdge>, Fragmentable {
  node: <T = AccountPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AccountEdgeSubscription extends Promise<AsyncIterator<AccountEdge>>, Fragmentable {
  node: <T = AccountSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AccountConnection {
  pageInfo: PageInfo;
  edges: AccountEdge[];
}

export interface AccountConnectionPromise extends Promise<AccountConnection>, Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AccountEdge>>() => T;
  aggregate: <T = AggregateAccountPromise>() => T;
}

export interface AccountConnectionSubscription
  extends Promise<AsyncIterator<AccountConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AccountEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAccountSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription extends Promise<AsyncIterator<PageInfo>>, Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise extends Promise<BatchPayload>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface TaskPreviousValues {
  id: UUID;
  index?: Int;
  title: String;
  content?: String;
  status: TaskStatus;
  priority: TaskPriority;
  isImportant: Boolean;
  dueDate: DateTimeOutput;
  reminderDate?: DateTimeOutput;
  doSendMail: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TaskPreviousValuesPromise extends Promise<TaskPreviousValues>, Fragmentable {
  id: () => Promise<UUID>;
  index: () => Promise<Int>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  status: () => Promise<TaskStatus>;
  priority: () => Promise<TaskPriority>;
  isImportant: () => Promise<Boolean>;
  dueDate: () => Promise<DateTimeOutput>;
  reminderDate: () => Promise<DateTimeOutput>;
  doSendMail: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TaskPreviousValuesSubscription
  extends Promise<AsyncIterator<TaskPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  index: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<TaskStatus>>;
  priority: () => Promise<AsyncIterator<TaskPriority>>;
  isImportant: () => Promise<AsyncIterator<Boolean>>;
  dueDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  reminderDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  doSendMail: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription extends Promise<AsyncIterator<UserEdge>>, Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Account {
  id: UUID;
  username: String;
  password: String;
  email: String;
  role: Role;
  status?: AccountStatus;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface AccountPromise extends Promise<Account>, Fragmentable {
  id: () => Promise<UUID>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  role: () => Promise<Role>;
  status: () => Promise<AccountStatus>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  categories: <T = FragmentableArray<Category>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tasks: <T = FragmentableArray<Task>>(args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  steps: <T = FragmentableArray<Step>>(args?: {
    where?: StepWhereInput;
    orderBy?: StepOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  images: <T = FragmentableArray<Image>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AccountSubscription extends Promise<AsyncIterator<Account>>, Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  status: () => Promise<AsyncIterator<AccountStatus>>;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  categories: <T = Promise<AsyncIterator<CategorySubscription>>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tasks: <T = Promise<AsyncIterator<TaskSubscription>>>(args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  steps: <T = Promise<AsyncIterator<StepSubscription>>>(args?: {
    where?: StepWhereInput;
    orderBy?: StepOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  images: <T = Promise<AsyncIterator<ImageSubscription>>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AccountNullablePromise extends Promise<Account | null>, Fragmentable {
  id: () => Promise<UUID>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  role: () => Promise<Role>;
  status: () => Promise<AccountStatus>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  categories: <T = FragmentableArray<Category>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tasks: <T = FragmentableArray<Task>>(args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  steps: <T = FragmentableArray<Step>>(args?: {
    where?: StepWhereInput;
    orderBy?: StepOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  images: <T = FragmentableArray<Image>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AggregateTask {
  count: Int;
}

export interface AggregateTaskPromise extends Promise<AggregateTask>, Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTaskSubscription
  extends Promise<AsyncIterator<AggregateTask>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Image {
  id: UUID;
  url: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ImagePromise extends Promise<Image>, Fragmentable {
  id: () => Promise<UUID>;
  url: () => Promise<String>;
  task: <T = TaskPromise>() => T;
  account: <T = AccountPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ImageSubscription extends Promise<AsyncIterator<Image>>, Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  url: () => Promise<AsyncIterator<String>>;
  task: <T = TaskSubscription>() => T;
  account: <T = AccountSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ImageNullablePromise extends Promise<Image | null>, Fragmentable {
  id: () => Promise<UUID>;
  url: () => Promise<String>;
  task: <T = TaskPromise>() => T;
  account: <T = AccountPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TaskConnection {
  pageInfo: PageInfo;
  edges: TaskEdge[];
}

export interface TaskConnectionPromise extends Promise<TaskConnection>, Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TaskEdge>>() => T;
  aggregate: <T = AggregateTaskPromise>() => T;
}

export interface TaskConnectionSubscription
  extends Promise<AsyncIterator<TaskConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TaskEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTaskSubscription>() => T;
}

export interface Step {
  id: UUID;
  index?: Int;
  title: String;
  status?: StepStatus;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface StepPromise extends Promise<Step>, Fragmentable {
  id: () => Promise<UUID>;
  index: () => Promise<Int>;
  title: () => Promise<String>;
  status: () => Promise<StepStatus>;
  task: <T = TaskPromise>() => T;
  account: <T = AccountPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface StepSubscription extends Promise<AsyncIterator<Step>>, Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  index: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<StepStatus>>;
  task: <T = TaskSubscription>() => T;
  account: <T = AccountSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface StepNullablePromise extends Promise<Step | null>, Fragmentable {
  id: () => Promise<UUID>;
  index: () => Promise<Int>;
  title: () => Promise<String>;
  status: () => Promise<StepStatus>;
  task: <T = TaskPromise>() => T;
  account: <T = AccountPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface StepEdge {
  node: Step;
  cursor: String;
}

export interface StepEdgePromise extends Promise<StepEdge>, Fragmentable {
  node: <T = StepPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StepEdgeSubscription extends Promise<AsyncIterator<StepEdge>>, Fragmentable {
  node: <T = StepSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TaskSubscriptionPayload {
  mutation: MutationType;
  node: Task;
  updatedFields: String[];
  previousValues: TaskPreviousValues;
}

export interface TaskSubscriptionPayloadPromise
  extends Promise<TaskSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TaskPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TaskPreviousValuesPromise>() => T;
}

export interface TaskSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TaskSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TaskSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TaskPreviousValuesSubscription>() => T;
}

export interface AggregateImage {
  count: Int;
}

export interface AggregateImagePromise extends Promise<AggregateImage>, Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateImageSubscription
  extends Promise<AsyncIterator<AggregateImage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AccountSubscriptionPayload {
  mutation: MutationType;
  node: Account;
  updatedFields: String[];
  previousValues: AccountPreviousValues;
}

export interface AccountSubscriptionPayloadPromise
  extends Promise<AccountSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AccountPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AccountPreviousValuesPromise>() => T;
}

export interface AccountSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AccountSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AccountSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AccountPreviousValuesSubscription>() => T;
}

export interface ImageConnection {
  pageInfo: PageInfo;
  edges: ImageEdge[];
}

export interface ImageConnectionPromise extends Promise<ImageConnection>, Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ImageEdge>>() => T;
  aggregate: <T = AggregateImagePromise>() => T;
}

export interface ImageConnectionSubscription
  extends Promise<AsyncIterator<ImageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ImageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateImageSubscription>() => T;
}

export interface AccountPreviousValues {
  id: UUID;
  username: String;
  password: String;
  email: String;
  role: Role;
  status?: AccountStatus;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface AccountPreviousValuesPromise extends Promise<AccountPreviousValues>, Fragmentable {
  id: () => Promise<UUID>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  role: () => Promise<Role>;
  status: () => Promise<AccountStatus>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AccountPreviousValuesSubscription
  extends Promise<AsyncIterator<AccountPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  status: () => Promise<AsyncIterator<AccountStatus>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CategoryEdge {
  node: Category;
  cursor: String;
}

export interface CategoryEdgePromise extends Promise<CategoryEdge>, Fragmentable {
  node: <T = CategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CategoryEdgeSubscription
  extends Promise<AsyncIterator<CategoryEdge>>,
    Fragmentable {
  node: <T = CategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: UUID;
  name: String;
  bio?: String;
  dob?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<UUID>;
  name: () => Promise<String>;
  bio: () => Promise<String>;
  dob: () => Promise<DateTimeOutput>;
  account: <T = AccountPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription extends Promise<AsyncIterator<User>>, Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  name: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
  dob: () => Promise<AsyncIterator<DateTimeOutput>>;
  account: <T = AccountSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise extends Promise<User | null>, Fragmentable {
  id: () => Promise<UUID>;
  name: () => Promise<String>;
  bio: () => Promise<String>;
  dob: () => Promise<DateTimeOutput>;
  account: <T = AccountPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise extends Promise<AggregateUser>, Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CategorySubscriptionPayload {
  mutation: MutationType;
  node: Category;
  updatedFields: String[];
  previousValues: CategoryPreviousValues;
}

export interface CategorySubscriptionPayloadPromise
  extends Promise<CategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CategoryPreviousValuesPromise>() => T;
}

export interface CategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CategoryPreviousValuesSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise extends Promise<UserConnection>, Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface CategoryPreviousValues {
  id: UUID;
  index?: Int;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CategoryPreviousValuesPromise
  extends Promise<CategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  index: () => Promise<Int>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<CategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  index: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateStep {
  count: Int;
}

export interface AggregateStepPromise extends Promise<AggregateStep>, Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStepSubscription
  extends Promise<AsyncIterator<AggregateStep>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Task {
  id: UUID;
  index?: Int;
  title: String;
  content?: String;
  status: TaskStatus;
  priority: TaskPriority;
  isImportant: Boolean;
  dueDate: DateTimeOutput;
  reminderDate?: DateTimeOutput;
  doSendMail: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TaskPromise extends Promise<Task>, Fragmentable {
  id: () => Promise<UUID>;
  index: () => Promise<Int>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  status: () => Promise<TaskStatus>;
  priority: () => Promise<TaskPriority>;
  isImportant: () => Promise<Boolean>;
  dueDate: () => Promise<DateTimeOutput>;
  reminderDate: () => Promise<DateTimeOutput>;
  doSendMail: () => Promise<Boolean>;
  category: <T = CategoryPromise>() => T;
  account: <T = AccountPromise>() => T;
  steps: <T = FragmentableArray<Step>>(args?: {
    where?: StepWhereInput;
    orderBy?: StepOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  images: <T = FragmentableArray<Image>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TaskSubscription extends Promise<AsyncIterator<Task>>, Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  index: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<TaskStatus>>;
  priority: () => Promise<AsyncIterator<TaskPriority>>;
  isImportant: () => Promise<AsyncIterator<Boolean>>;
  dueDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  reminderDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  doSendMail: () => Promise<AsyncIterator<Boolean>>;
  category: <T = CategorySubscription>() => T;
  account: <T = AccountSubscription>() => T;
  steps: <T = Promise<AsyncIterator<StepSubscription>>>(args?: {
    where?: StepWhereInput;
    orderBy?: StepOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  images: <T = Promise<AsyncIterator<ImageSubscription>>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TaskNullablePromise extends Promise<Task | null>, Fragmentable {
  id: () => Promise<UUID>;
  index: () => Promise<Int>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  status: () => Promise<TaskStatus>;
  priority: () => Promise<TaskPriority>;
  isImportant: () => Promise<Boolean>;
  dueDate: () => Promise<DateTimeOutput>;
  reminderDate: () => Promise<DateTimeOutput>;
  doSendMail: () => Promise<Boolean>;
  category: <T = CategoryPromise>() => T;
  account: <T = AccountPromise>() => T;
  steps: <T = FragmentableArray<Step>>(args?: {
    where?: StepWhereInput;
    orderBy?: StepOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  images: <T = FragmentableArray<Image>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ImageEdge {
  node: Image;
  cursor: String;
}

export interface ImageEdgePromise extends Promise<ImageEdge>, Fragmentable {
  node: <T = ImagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ImageEdgeSubscription extends Promise<AsyncIterator<ImageEdge>>, Fragmentable {
  node: <T = ImageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CategoryConnection {
  pageInfo: PageInfo;
  edges: CategoryEdge[];
}

export interface CategoryConnectionPromise extends Promise<CategoryConnection>, Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CategoryEdge>>() => T;
  aggregate: <T = AggregateCategoryPromise>() => T;
}

export interface CategoryConnectionSubscription
  extends Promise<AsyncIterator<CategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCategorySubscription>() => T;
}

export interface StepSubscriptionPayload {
  mutation: MutationType;
  node: Step;
  updatedFields: String[];
  previousValues: StepPreviousValues;
}

export interface StepSubscriptionPayloadPromise
  extends Promise<StepSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StepPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StepPreviousValuesPromise>() => T;
}

export interface StepSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StepSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StepSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StepPreviousValuesSubscription>() => T;
}

export interface Category {
  id: UUID;
  index?: Int;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CategoryPromise extends Promise<Category>, Fragmentable {
  id: () => Promise<UUID>;
  index: () => Promise<Int>;
  name: () => Promise<String>;
  account: <T = AccountPromise>() => T;
  tasks: <T = FragmentableArray<Task>>(args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CategorySubscription extends Promise<AsyncIterator<Category>>, Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  index: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  account: <T = AccountSubscription>() => T;
  tasks: <T = Promise<AsyncIterator<TaskSubscription>>>(args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CategoryNullablePromise extends Promise<Category | null>, Fragmentable {
  id: () => Promise<UUID>;
  index: () => Promise<Int>;
  name: () => Promise<String>;
  account: <T = AccountPromise>() => T;
  tasks: <T = FragmentableArray<Task>>(args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ImagePreviousValues {
  id: UUID;
  url: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ImagePreviousValuesPromise extends Promise<ImagePreviousValues>, Fragmentable {
  id: () => Promise<UUID>;
  url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ImagePreviousValuesSubscription
  extends Promise<AsyncIterator<ImagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ImageSubscriptionPayload {
  mutation: MutationType;
  node: Image;
  updatedFields: String[];
  previousValues: ImagePreviousValues;
}

export interface ImageSubscriptionPayloadPromise
  extends Promise<ImageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ImagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ImagePreviousValuesPromise>() => T;
}

export interface ImageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ImageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ImageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ImagePreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AggregateCategory {
  count: Int;
}

export interface AggregateCategoryPromise extends Promise<AggregateCategory>, Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCategorySubscription
  extends Promise<AsyncIterator<AggregateCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StepConnection {
  pageInfo: PageInfo;
  edges: StepEdge[];
}

export interface StepConnectionPromise extends Promise<StepConnection>, Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StepEdge>>() => T;
  aggregate: <T = AggregateStepPromise>() => T;
}

export interface StepConnectionSubscription
  extends Promise<AsyncIterator<StepConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StepEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStepSubscription>() => T;
}

export interface TaskEdge {
  node: Task;
  cursor: String;
}

export interface TaskEdgePromise extends Promise<TaskEdge>, Fragmentable {
  node: <T = TaskPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TaskEdgeSubscription extends Promise<AsyncIterator<TaskEdge>>, Fragmentable {
  node: <T = TaskSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type UUID = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: 'Role',
    embedded: false,
  },
  {
    name: 'AccountStatus',
    embedded: false,
  },
  {
    name: 'Account',
    embedded: false,
  },
  {
    name: 'User',
    embedded: false,
  },
  {
    name: 'Category',
    embedded: false,
  },
  {
    name: 'TaskStatus',
    embedded: false,
  },
  {
    name: 'TaskPriority',
    embedded: false,
  },
  {
    name: 'Task',
    embedded: false,
  },
  {
    name: 'StepStatus',
    embedded: false,
  },
  {
    name: 'Step',
    embedded: false,
  },
  {
    name: 'Image',
    embedded: false,
  },
];

/**
 * Type Defs
 */

export const prisma: Prisma;
