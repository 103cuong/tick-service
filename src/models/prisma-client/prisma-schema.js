module.exports = {
  // Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
  typeDefs:
    // Please don't change this file manually but run `prisma generate` to update it.
    // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

    /* GraphQL */ `
      type Account {
        id: UUID!
        username: String!
        password: String!
        role: Role!
        categories(
          where: CategoryWhereInput
          orderBy: CategoryOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Category!]
        tasks(
          where: TaskWhereInput
          orderBy: TaskOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Task!]
        steps(
          where: StepWhereInput
          orderBy: StepOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Step!]
        images(
          where: ImageWhereInput
          orderBy: ImageOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Image!]
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      type AccountConnection {
        pageInfo: PageInfo!
        edges: [AccountEdge]!
        aggregate: AggregateAccount!
      }

      input AccountCreateInput {
        id: UUID
        username: String!
        password: String!
        role: Role
        categories: CategoryCreateManyWithoutAccountInput
        tasks: TaskCreateManyWithoutAccountInput
        steps: StepCreateManyWithoutAccountInput
        images: ImageCreateManyWithoutAccountInput
      }

      input AccountCreateOneWithoutCategoriesInput {
        create: AccountCreateWithoutCategoriesInput
        connect: AccountWhereUniqueInput
      }

      input AccountCreateOneWithoutImagesInput {
        create: AccountCreateWithoutImagesInput
        connect: AccountWhereUniqueInput
      }

      input AccountCreateOneWithoutStepsInput {
        create: AccountCreateWithoutStepsInput
        connect: AccountWhereUniqueInput
      }

      input AccountCreateOneWithoutTasksInput {
        create: AccountCreateWithoutTasksInput
        connect: AccountWhereUniqueInput
      }

      input AccountCreateWithoutCategoriesInput {
        id: UUID
        username: String!
        password: String!
        role: Role
        tasks: TaskCreateManyWithoutAccountInput
        steps: StepCreateManyWithoutAccountInput
        images: ImageCreateManyWithoutAccountInput
      }

      input AccountCreateWithoutImagesInput {
        id: UUID
        username: String!
        password: String!
        role: Role
        categories: CategoryCreateManyWithoutAccountInput
        tasks: TaskCreateManyWithoutAccountInput
        steps: StepCreateManyWithoutAccountInput
      }

      input AccountCreateWithoutStepsInput {
        id: UUID
        username: String!
        password: String!
        role: Role
        categories: CategoryCreateManyWithoutAccountInput
        tasks: TaskCreateManyWithoutAccountInput
        images: ImageCreateManyWithoutAccountInput
      }

      input AccountCreateWithoutTasksInput {
        id: UUID
        username: String!
        password: String!
        role: Role
        categories: CategoryCreateManyWithoutAccountInput
        steps: StepCreateManyWithoutAccountInput
        images: ImageCreateManyWithoutAccountInput
      }

      type AccountEdge {
        node: Account!
        cursor: String!
      }

      enum AccountOrderByInput {
        id_ASC
        id_DESC
        username_ASC
        username_DESC
        password_ASC
        password_DESC
        role_ASC
        role_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
      }

      type AccountPreviousValues {
        id: UUID!
        username: String!
        password: String!
        role: Role!
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      type AccountSubscriptionPayload {
        mutation: MutationType!
        node: Account
        updatedFields: [String!]
        previousValues: AccountPreviousValues
      }

      input AccountSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: AccountWhereInput
        AND: [AccountSubscriptionWhereInput!]
        OR: [AccountSubscriptionWhereInput!]
        NOT: [AccountSubscriptionWhereInput!]
      }

      input AccountUpdateInput {
        username: String
        password: String
        role: Role
        categories: CategoryUpdateManyWithoutAccountInput
        tasks: TaskUpdateManyWithoutAccountInput
        steps: StepUpdateManyWithoutAccountInput
        images: ImageUpdateManyWithoutAccountInput
      }

      input AccountUpdateManyMutationInput {
        username: String
        password: String
        role: Role
      }

      input AccountUpdateOneRequiredWithoutCategoriesInput {
        create: AccountCreateWithoutCategoriesInput
        update: AccountUpdateWithoutCategoriesDataInput
        upsert: AccountUpsertWithoutCategoriesInput
        connect: AccountWhereUniqueInput
      }

      input AccountUpdateOneRequiredWithoutImagesInput {
        create: AccountCreateWithoutImagesInput
        update: AccountUpdateWithoutImagesDataInput
        upsert: AccountUpsertWithoutImagesInput
        connect: AccountWhereUniqueInput
      }

      input AccountUpdateOneRequiredWithoutStepsInput {
        create: AccountCreateWithoutStepsInput
        update: AccountUpdateWithoutStepsDataInput
        upsert: AccountUpsertWithoutStepsInput
        connect: AccountWhereUniqueInput
      }

      input AccountUpdateOneRequiredWithoutTasksInput {
        create: AccountCreateWithoutTasksInput
        update: AccountUpdateWithoutTasksDataInput
        upsert: AccountUpsertWithoutTasksInput
        connect: AccountWhereUniqueInput
      }

      input AccountUpdateWithoutCategoriesDataInput {
        username: String
        password: String
        role: Role
        tasks: TaskUpdateManyWithoutAccountInput
        steps: StepUpdateManyWithoutAccountInput
        images: ImageUpdateManyWithoutAccountInput
      }

      input AccountUpdateWithoutImagesDataInput {
        username: String
        password: String
        role: Role
        categories: CategoryUpdateManyWithoutAccountInput
        tasks: TaskUpdateManyWithoutAccountInput
        steps: StepUpdateManyWithoutAccountInput
      }

      input AccountUpdateWithoutStepsDataInput {
        username: String
        password: String
        role: Role
        categories: CategoryUpdateManyWithoutAccountInput
        tasks: TaskUpdateManyWithoutAccountInput
        images: ImageUpdateManyWithoutAccountInput
      }

      input AccountUpdateWithoutTasksDataInput {
        username: String
        password: String
        role: Role
        categories: CategoryUpdateManyWithoutAccountInput
        steps: StepUpdateManyWithoutAccountInput
        images: ImageUpdateManyWithoutAccountInput
      }

      input AccountUpsertWithoutCategoriesInput {
        update: AccountUpdateWithoutCategoriesDataInput!
        create: AccountCreateWithoutCategoriesInput!
      }

      input AccountUpsertWithoutImagesInput {
        update: AccountUpdateWithoutImagesDataInput!
        create: AccountCreateWithoutImagesInput!
      }

      input AccountUpsertWithoutStepsInput {
        update: AccountUpdateWithoutStepsDataInput!
        create: AccountCreateWithoutStepsInput!
      }

      input AccountUpsertWithoutTasksInput {
        update: AccountUpdateWithoutTasksDataInput!
        create: AccountCreateWithoutTasksInput!
      }

      input AccountWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        username: String
        username_not: String
        username_in: [String!]
        username_not_in: [String!]
        username_lt: String
        username_lte: String
        username_gt: String
        username_gte: String
        username_contains: String
        username_not_contains: String
        username_starts_with: String
        username_not_starts_with: String
        username_ends_with: String
        username_not_ends_with: String
        password: String
        password_not: String
        password_in: [String!]
        password_not_in: [String!]
        password_lt: String
        password_lte: String
        password_gt: String
        password_gte: String
        password_contains: String
        password_not_contains: String
        password_starts_with: String
        password_not_starts_with: String
        password_ends_with: String
        password_not_ends_with: String
        role: Role
        role_not: Role
        role_in: [Role!]
        role_not_in: [Role!]
        categories_every: CategoryWhereInput
        categories_some: CategoryWhereInput
        categories_none: CategoryWhereInput
        tasks_every: TaskWhereInput
        tasks_some: TaskWhereInput
        tasks_none: TaskWhereInput
        steps_every: StepWhereInput
        steps_some: StepWhereInput
        steps_none: StepWhereInput
        images_every: ImageWhereInput
        images_some: ImageWhereInput
        images_none: ImageWhereInput
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [AccountWhereInput!]
        OR: [AccountWhereInput!]
        NOT: [AccountWhereInput!]
      }

      input AccountWhereUniqueInput {
        id: UUID
        username: String
      }

      type AggregateAccount {
        count: Int!
      }

      type AggregateCategory {
        count: Int!
      }

      type AggregateImage {
        count: Int!
      }

      type AggregateStep {
        count: Int!
      }

      type AggregateTask {
        count: Int!
      }

      type BatchPayload {
        count: Long!
      }

      type Category {
        id: UUID!
        index: Int
        name: String!
        account: Account!
        tasks(
          where: TaskWhereInput
          orderBy: TaskOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Task!]
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      type CategoryConnection {
        pageInfo: PageInfo!
        edges: [CategoryEdge]!
        aggregate: AggregateCategory!
      }

      input CategoryCreateInput {
        id: UUID
        index: Int
        name: String!
        account: AccountCreateOneWithoutCategoriesInput!
        tasks: TaskCreateManyWithoutCategoryInput
      }

      input CategoryCreateManyWithoutAccountInput {
        create: [CategoryCreateWithoutAccountInput!]
        connect: [CategoryWhereUniqueInput!]
      }

      input CategoryCreateOneWithoutTasksInput {
        create: CategoryCreateWithoutTasksInput
        connect: CategoryWhereUniqueInput
      }

      input CategoryCreateWithoutAccountInput {
        id: UUID
        index: Int
        name: String!
        tasks: TaskCreateManyWithoutCategoryInput
      }

      input CategoryCreateWithoutTasksInput {
        id: UUID
        index: Int
        name: String!
        account: AccountCreateOneWithoutCategoriesInput!
      }

      type CategoryEdge {
        node: Category!
        cursor: String!
      }

      enum CategoryOrderByInput {
        id_ASC
        id_DESC
        index_ASC
        index_DESC
        name_ASC
        name_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
      }

      type CategoryPreviousValues {
        id: UUID!
        index: Int
        name: String!
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      input CategoryScalarWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        index: Int
        index_not: Int
        index_in: [Int!]
        index_not_in: [Int!]
        index_lt: Int
        index_lte: Int
        index_gt: Int
        index_gte: Int
        name: String
        name_not: String
        name_in: [String!]
        name_not_in: [String!]
        name_lt: String
        name_lte: String
        name_gt: String
        name_gte: String
        name_contains: String
        name_not_contains: String
        name_starts_with: String
        name_not_starts_with: String
        name_ends_with: String
        name_not_ends_with: String
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [CategoryScalarWhereInput!]
        OR: [CategoryScalarWhereInput!]
        NOT: [CategoryScalarWhereInput!]
      }

      type CategorySubscriptionPayload {
        mutation: MutationType!
        node: Category
        updatedFields: [String!]
        previousValues: CategoryPreviousValues
      }

      input CategorySubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: CategoryWhereInput
        AND: [CategorySubscriptionWhereInput!]
        OR: [CategorySubscriptionWhereInput!]
        NOT: [CategorySubscriptionWhereInput!]
      }

      input CategoryUpdateInput {
        index: Int
        name: String
        account: AccountUpdateOneRequiredWithoutCategoriesInput
        tasks: TaskUpdateManyWithoutCategoryInput
      }

      input CategoryUpdateManyDataInput {
        index: Int
        name: String
      }

      input CategoryUpdateManyMutationInput {
        index: Int
        name: String
      }

      input CategoryUpdateManyWithoutAccountInput {
        create: [CategoryCreateWithoutAccountInput!]
        delete: [CategoryWhereUniqueInput!]
        connect: [CategoryWhereUniqueInput!]
        set: [CategoryWhereUniqueInput!]
        disconnect: [CategoryWhereUniqueInput!]
        update: [CategoryUpdateWithWhereUniqueWithoutAccountInput!]
        upsert: [CategoryUpsertWithWhereUniqueWithoutAccountInput!]
        deleteMany: [CategoryScalarWhereInput!]
        updateMany: [CategoryUpdateManyWithWhereNestedInput!]
      }

      input CategoryUpdateManyWithWhereNestedInput {
        where: CategoryScalarWhereInput!
        data: CategoryUpdateManyDataInput!
      }

      input CategoryUpdateOneRequiredWithoutTasksInput {
        create: CategoryCreateWithoutTasksInput
        update: CategoryUpdateWithoutTasksDataInput
        upsert: CategoryUpsertWithoutTasksInput
        connect: CategoryWhereUniqueInput
      }

      input CategoryUpdateWithoutAccountDataInput {
        index: Int
        name: String
        tasks: TaskUpdateManyWithoutCategoryInput
      }

      input CategoryUpdateWithoutTasksDataInput {
        index: Int
        name: String
        account: AccountUpdateOneRequiredWithoutCategoriesInput
      }

      input CategoryUpdateWithWhereUniqueWithoutAccountInput {
        where: CategoryWhereUniqueInput!
        data: CategoryUpdateWithoutAccountDataInput!
      }

      input CategoryUpsertWithoutTasksInput {
        update: CategoryUpdateWithoutTasksDataInput!
        create: CategoryCreateWithoutTasksInput!
      }

      input CategoryUpsertWithWhereUniqueWithoutAccountInput {
        where: CategoryWhereUniqueInput!
        update: CategoryUpdateWithoutAccountDataInput!
        create: CategoryCreateWithoutAccountInput!
      }

      input CategoryWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        index: Int
        index_not: Int
        index_in: [Int!]
        index_not_in: [Int!]
        index_lt: Int
        index_lte: Int
        index_gt: Int
        index_gte: Int
        name: String
        name_not: String
        name_in: [String!]
        name_not_in: [String!]
        name_lt: String
        name_lte: String
        name_gt: String
        name_gte: String
        name_contains: String
        name_not_contains: String
        name_starts_with: String
        name_not_starts_with: String
        name_ends_with: String
        name_not_ends_with: String
        account: AccountWhereInput
        tasks_every: TaskWhereInput
        tasks_some: TaskWhereInput
        tasks_none: TaskWhereInput
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [CategoryWhereInput!]
        OR: [CategoryWhereInput!]
        NOT: [CategoryWhereInput!]
      }

      input CategoryWhereUniqueInput {
        id: UUID
      }

      scalar DateTime

      type Image {
        id: UUID!
        url: String!
        task: Task!
        account: Account!
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      type ImageConnection {
        pageInfo: PageInfo!
        edges: [ImageEdge]!
        aggregate: AggregateImage!
      }

      input ImageCreateInput {
        id: UUID
        url: String!
        task: TaskCreateOneWithoutImagesInput!
        account: AccountCreateOneWithoutImagesInput!
      }

      input ImageCreateManyWithoutAccountInput {
        create: [ImageCreateWithoutAccountInput!]
        connect: [ImageWhereUniqueInput!]
      }

      input ImageCreateManyWithoutTaskInput {
        create: [ImageCreateWithoutTaskInput!]
        connect: [ImageWhereUniqueInput!]
      }

      input ImageCreateWithoutAccountInput {
        id: UUID
        url: String!
        task: TaskCreateOneWithoutImagesInput!
      }

      input ImageCreateWithoutTaskInput {
        id: UUID
        url: String!
        account: AccountCreateOneWithoutImagesInput!
      }

      type ImageEdge {
        node: Image!
        cursor: String!
      }

      enum ImageOrderByInput {
        id_ASC
        id_DESC
        url_ASC
        url_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
      }

      type ImagePreviousValues {
        id: UUID!
        url: String!
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      input ImageScalarWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        url: String
        url_not: String
        url_in: [String!]
        url_not_in: [String!]
        url_lt: String
        url_lte: String
        url_gt: String
        url_gte: String
        url_contains: String
        url_not_contains: String
        url_starts_with: String
        url_not_starts_with: String
        url_ends_with: String
        url_not_ends_with: String
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [ImageScalarWhereInput!]
        OR: [ImageScalarWhereInput!]
        NOT: [ImageScalarWhereInput!]
      }

      type ImageSubscriptionPayload {
        mutation: MutationType!
        node: Image
        updatedFields: [String!]
        previousValues: ImagePreviousValues
      }

      input ImageSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: ImageWhereInput
        AND: [ImageSubscriptionWhereInput!]
        OR: [ImageSubscriptionWhereInput!]
        NOT: [ImageSubscriptionWhereInput!]
      }

      input ImageUpdateInput {
        url: String
        task: TaskUpdateOneRequiredWithoutImagesInput
        account: AccountUpdateOneRequiredWithoutImagesInput
      }

      input ImageUpdateManyDataInput {
        url: String
      }

      input ImageUpdateManyMutationInput {
        url: String
      }

      input ImageUpdateManyWithoutAccountInput {
        create: [ImageCreateWithoutAccountInput!]
        delete: [ImageWhereUniqueInput!]
        connect: [ImageWhereUniqueInput!]
        set: [ImageWhereUniqueInput!]
        disconnect: [ImageWhereUniqueInput!]
        update: [ImageUpdateWithWhereUniqueWithoutAccountInput!]
        upsert: [ImageUpsertWithWhereUniqueWithoutAccountInput!]
        deleteMany: [ImageScalarWhereInput!]
        updateMany: [ImageUpdateManyWithWhereNestedInput!]
      }

      input ImageUpdateManyWithoutTaskInput {
        create: [ImageCreateWithoutTaskInput!]
        delete: [ImageWhereUniqueInput!]
        connect: [ImageWhereUniqueInput!]
        set: [ImageWhereUniqueInput!]
        disconnect: [ImageWhereUniqueInput!]
        update: [ImageUpdateWithWhereUniqueWithoutTaskInput!]
        upsert: [ImageUpsertWithWhereUniqueWithoutTaskInput!]
        deleteMany: [ImageScalarWhereInput!]
        updateMany: [ImageUpdateManyWithWhereNestedInput!]
      }

      input ImageUpdateManyWithWhereNestedInput {
        where: ImageScalarWhereInput!
        data: ImageUpdateManyDataInput!
      }

      input ImageUpdateWithoutAccountDataInput {
        url: String
        task: TaskUpdateOneRequiredWithoutImagesInput
      }

      input ImageUpdateWithoutTaskDataInput {
        url: String
        account: AccountUpdateOneRequiredWithoutImagesInput
      }

      input ImageUpdateWithWhereUniqueWithoutAccountInput {
        where: ImageWhereUniqueInput!
        data: ImageUpdateWithoutAccountDataInput!
      }

      input ImageUpdateWithWhereUniqueWithoutTaskInput {
        where: ImageWhereUniqueInput!
        data: ImageUpdateWithoutTaskDataInput!
      }

      input ImageUpsertWithWhereUniqueWithoutAccountInput {
        where: ImageWhereUniqueInput!
        update: ImageUpdateWithoutAccountDataInput!
        create: ImageCreateWithoutAccountInput!
      }

      input ImageUpsertWithWhereUniqueWithoutTaskInput {
        where: ImageWhereUniqueInput!
        update: ImageUpdateWithoutTaskDataInput!
        create: ImageCreateWithoutTaskInput!
      }

      input ImageWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        url: String
        url_not: String
        url_in: [String!]
        url_not_in: [String!]
        url_lt: String
        url_lte: String
        url_gt: String
        url_gte: String
        url_contains: String
        url_not_contains: String
        url_starts_with: String
        url_not_starts_with: String
        url_ends_with: String
        url_not_ends_with: String
        task: TaskWhereInput
        account: AccountWhereInput
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [ImageWhereInput!]
        OR: [ImageWhereInput!]
        NOT: [ImageWhereInput!]
      }

      input ImageWhereUniqueInput {
        id: UUID
      }

      scalar Long

      type Mutation {
        createAccount(data: AccountCreateInput!): Account!
        updateAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account
        updateManyAccounts(
          data: AccountUpdateManyMutationInput!
          where: AccountWhereInput
        ): BatchPayload!
        upsertAccount(
          where: AccountWhereUniqueInput!
          create: AccountCreateInput!
          update: AccountUpdateInput!
        ): Account!
        deleteAccount(where: AccountWhereUniqueInput!): Account
        deleteManyAccounts(where: AccountWhereInput): BatchPayload!
        createCategory(data: CategoryCreateInput!): Category!
        updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
        updateManyCategories(
          data: CategoryUpdateManyMutationInput!
          where: CategoryWhereInput
        ): BatchPayload!
        upsertCategory(
          where: CategoryWhereUniqueInput!
          create: CategoryCreateInput!
          update: CategoryUpdateInput!
        ): Category!
        deleteCategory(where: CategoryWhereUniqueInput!): Category
        deleteManyCategories(where: CategoryWhereInput): BatchPayload!
        createImage(data: ImageCreateInput!): Image!
        updateImage(data: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image
        updateManyImages(data: ImageUpdateManyMutationInput!, where: ImageWhereInput): BatchPayload!
        upsertImage(
          where: ImageWhereUniqueInput!
          create: ImageCreateInput!
          update: ImageUpdateInput!
        ): Image!
        deleteImage(where: ImageWhereUniqueInput!): Image
        deleteManyImages(where: ImageWhereInput): BatchPayload!
        createStep(data: StepCreateInput!): Step!
        updateStep(data: StepUpdateInput!, where: StepWhereUniqueInput!): Step
        updateManySteps(data: StepUpdateManyMutationInput!, where: StepWhereInput): BatchPayload!
        upsertStep(
          where: StepWhereUniqueInput!
          create: StepCreateInput!
          update: StepUpdateInput!
        ): Step!
        deleteStep(where: StepWhereUniqueInput!): Step
        deleteManySteps(where: StepWhereInput): BatchPayload!
        createTask(data: TaskCreateInput!): Task!
        updateTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
        updateManyTasks(data: TaskUpdateManyMutationInput!, where: TaskWhereInput): BatchPayload!
        upsertTask(
          where: TaskWhereUniqueInput!
          create: TaskCreateInput!
          update: TaskUpdateInput!
        ): Task!
        deleteTask(where: TaskWhereUniqueInput!): Task
        deleteManyTasks(where: TaskWhereInput): BatchPayload!
      }

      enum MutationType {
        CREATED
        UPDATED
        DELETED
      }

      interface Node {
        id: ID!
      }

      type PageInfo {
        hasNextPage: Boolean!
        hasPreviousPage: Boolean!
        startCursor: String
        endCursor: String
      }

      type Query {
        account(where: AccountWhereUniqueInput!): Account
        accounts(
          where: AccountWhereInput
          orderBy: AccountOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Account]!
        accountsConnection(
          where: AccountWhereInput
          orderBy: AccountOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): AccountConnection!
        category(where: CategoryWhereUniqueInput!): Category
        categories(
          where: CategoryWhereInput
          orderBy: CategoryOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Category]!
        categoriesConnection(
          where: CategoryWhereInput
          orderBy: CategoryOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): CategoryConnection!
        image(where: ImageWhereUniqueInput!): Image
        images(
          where: ImageWhereInput
          orderBy: ImageOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Image]!
        imagesConnection(
          where: ImageWhereInput
          orderBy: ImageOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): ImageConnection!
        step(where: StepWhereUniqueInput!): Step
        steps(
          where: StepWhereInput
          orderBy: StepOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Step]!
        stepsConnection(
          where: StepWhereInput
          orderBy: StepOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): StepConnection!
        task(where: TaskWhereUniqueInput!): Task
        tasks(
          where: TaskWhereInput
          orderBy: TaskOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Task]!
        tasksConnection(
          where: TaskWhereInput
          orderBy: TaskOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): TaskConnection!
        node(id: ID!): Node
      }

      enum Role {
        Free
        Premium
      }

      type Step {
        id: UUID!
        index: Int
        title: String!
        status: StepStatus
        task: Task!
        account: Account!
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      type StepConnection {
        pageInfo: PageInfo!
        edges: [StepEdge]!
        aggregate: AggregateStep!
      }

      input StepCreateInput {
        id: UUID
        index: Int
        title: String!
        status: StepStatus
        task: TaskCreateOneWithoutStepsInput!
        account: AccountCreateOneWithoutStepsInput!
      }

      input StepCreateManyWithoutAccountInput {
        create: [StepCreateWithoutAccountInput!]
        connect: [StepWhereUniqueInput!]
      }

      input StepCreateManyWithoutTaskInput {
        create: [StepCreateWithoutTaskInput!]
        connect: [StepWhereUniqueInput!]
      }

      input StepCreateWithoutAccountInput {
        id: UUID
        index: Int
        title: String!
        status: StepStatus
        task: TaskCreateOneWithoutStepsInput!
      }

      input StepCreateWithoutTaskInput {
        id: UUID
        index: Int
        title: String!
        status: StepStatus
        account: AccountCreateOneWithoutStepsInput!
      }

      type StepEdge {
        node: Step!
        cursor: String!
      }

      enum StepOrderByInput {
        id_ASC
        id_DESC
        index_ASC
        index_DESC
        title_ASC
        title_DESC
        status_ASC
        status_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
      }

      type StepPreviousValues {
        id: UUID!
        index: Int
        title: String!
        status: StepStatus
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      input StepScalarWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        index: Int
        index_not: Int
        index_in: [Int!]
        index_not_in: [Int!]
        index_lt: Int
        index_lte: Int
        index_gt: Int
        index_gte: Int
        title: String
        title_not: String
        title_in: [String!]
        title_not_in: [String!]
        title_lt: String
        title_lte: String
        title_gt: String
        title_gte: String
        title_contains: String
        title_not_contains: String
        title_starts_with: String
        title_not_starts_with: String
        title_ends_with: String
        title_not_ends_with: String
        status: StepStatus
        status_not: StepStatus
        status_in: [StepStatus!]
        status_not_in: [StepStatus!]
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [StepScalarWhereInput!]
        OR: [StepScalarWhereInput!]
        NOT: [StepScalarWhereInput!]
      }

      enum StepStatus {
        Todo
        Done
      }

      type StepSubscriptionPayload {
        mutation: MutationType!
        node: Step
        updatedFields: [String!]
        previousValues: StepPreviousValues
      }

      input StepSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: StepWhereInput
        AND: [StepSubscriptionWhereInput!]
        OR: [StepSubscriptionWhereInput!]
        NOT: [StepSubscriptionWhereInput!]
      }

      input StepUpdateInput {
        index: Int
        title: String
        status: StepStatus
        task: TaskUpdateOneRequiredWithoutStepsInput
        account: AccountUpdateOneRequiredWithoutStepsInput
      }

      input StepUpdateManyDataInput {
        index: Int
        title: String
        status: StepStatus
      }

      input StepUpdateManyMutationInput {
        index: Int
        title: String
        status: StepStatus
      }

      input StepUpdateManyWithoutAccountInput {
        create: [StepCreateWithoutAccountInput!]
        delete: [StepWhereUniqueInput!]
        connect: [StepWhereUniqueInput!]
        set: [StepWhereUniqueInput!]
        disconnect: [StepWhereUniqueInput!]
        update: [StepUpdateWithWhereUniqueWithoutAccountInput!]
        upsert: [StepUpsertWithWhereUniqueWithoutAccountInput!]
        deleteMany: [StepScalarWhereInput!]
        updateMany: [StepUpdateManyWithWhereNestedInput!]
      }

      input StepUpdateManyWithoutTaskInput {
        create: [StepCreateWithoutTaskInput!]
        delete: [StepWhereUniqueInput!]
        connect: [StepWhereUniqueInput!]
        set: [StepWhereUniqueInput!]
        disconnect: [StepWhereUniqueInput!]
        update: [StepUpdateWithWhereUniqueWithoutTaskInput!]
        upsert: [StepUpsertWithWhereUniqueWithoutTaskInput!]
        deleteMany: [StepScalarWhereInput!]
        updateMany: [StepUpdateManyWithWhereNestedInput!]
      }

      input StepUpdateManyWithWhereNestedInput {
        where: StepScalarWhereInput!
        data: StepUpdateManyDataInput!
      }

      input StepUpdateWithoutAccountDataInput {
        index: Int
        title: String
        status: StepStatus
        task: TaskUpdateOneRequiredWithoutStepsInput
      }

      input StepUpdateWithoutTaskDataInput {
        index: Int
        title: String
        status: StepStatus
        account: AccountUpdateOneRequiredWithoutStepsInput
      }

      input StepUpdateWithWhereUniqueWithoutAccountInput {
        where: StepWhereUniqueInput!
        data: StepUpdateWithoutAccountDataInput!
      }

      input StepUpdateWithWhereUniqueWithoutTaskInput {
        where: StepWhereUniqueInput!
        data: StepUpdateWithoutTaskDataInput!
      }

      input StepUpsertWithWhereUniqueWithoutAccountInput {
        where: StepWhereUniqueInput!
        update: StepUpdateWithoutAccountDataInput!
        create: StepCreateWithoutAccountInput!
      }

      input StepUpsertWithWhereUniqueWithoutTaskInput {
        where: StepWhereUniqueInput!
        update: StepUpdateWithoutTaskDataInput!
        create: StepCreateWithoutTaskInput!
      }

      input StepWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        index: Int
        index_not: Int
        index_in: [Int!]
        index_not_in: [Int!]
        index_lt: Int
        index_lte: Int
        index_gt: Int
        index_gte: Int
        title: String
        title_not: String
        title_in: [String!]
        title_not_in: [String!]
        title_lt: String
        title_lte: String
        title_gt: String
        title_gte: String
        title_contains: String
        title_not_contains: String
        title_starts_with: String
        title_not_starts_with: String
        title_ends_with: String
        title_not_ends_with: String
        status: StepStatus
        status_not: StepStatus
        status_in: [StepStatus!]
        status_not_in: [StepStatus!]
        task: TaskWhereInput
        account: AccountWhereInput
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [StepWhereInput!]
        OR: [StepWhereInput!]
        NOT: [StepWhereInput!]
      }

      input StepWhereUniqueInput {
        id: UUID
      }

      type Subscription {
        account(where: AccountSubscriptionWhereInput): AccountSubscriptionPayload
        category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
        image(where: ImageSubscriptionWhereInput): ImageSubscriptionPayload
        step(where: StepSubscriptionWhereInput): StepSubscriptionPayload
        task(where: TaskSubscriptionWhereInput): TaskSubscriptionPayload
      }

      type Task {
        id: UUID!
        index: Int
        title: String!
        content: String
        status: TaskStatus!
        priority: TaskPriority!
        isImportant: Boolean!
        dueDate: DateTime!
        reminderDate: DateTime
        doSendMail: Boolean!
        category: Category!
        account: Account!
        steps(
          where: StepWhereInput
          orderBy: StepOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Step!]
        images(
          where: ImageWhereInput
          orderBy: ImageOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Image!]
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      type TaskConnection {
        pageInfo: PageInfo!
        edges: [TaskEdge]!
        aggregate: AggregateTask!
      }

      input TaskCreateInput {
        id: UUID
        index: Int
        title: String!
        content: String
        status: TaskStatus
        priority: TaskPriority
        isImportant: Boolean
        dueDate: DateTime!
        reminderDate: DateTime
        doSendMail: Boolean
        category: CategoryCreateOneWithoutTasksInput!
        account: AccountCreateOneWithoutTasksInput!
        steps: StepCreateManyWithoutTaskInput
        images: ImageCreateManyWithoutTaskInput
      }

      input TaskCreateManyWithoutAccountInput {
        create: [TaskCreateWithoutAccountInput!]
        connect: [TaskWhereUniqueInput!]
      }

      input TaskCreateManyWithoutCategoryInput {
        create: [TaskCreateWithoutCategoryInput!]
        connect: [TaskWhereUniqueInput!]
      }

      input TaskCreateOneWithoutImagesInput {
        create: TaskCreateWithoutImagesInput
        connect: TaskWhereUniqueInput
      }

      input TaskCreateOneWithoutStepsInput {
        create: TaskCreateWithoutStepsInput
        connect: TaskWhereUniqueInput
      }

      input TaskCreateWithoutAccountInput {
        id: UUID
        index: Int
        title: String!
        content: String
        status: TaskStatus
        priority: TaskPriority
        isImportant: Boolean
        dueDate: DateTime!
        reminderDate: DateTime
        doSendMail: Boolean
        category: CategoryCreateOneWithoutTasksInput!
        steps: StepCreateManyWithoutTaskInput
        images: ImageCreateManyWithoutTaskInput
      }

      input TaskCreateWithoutCategoryInput {
        id: UUID
        index: Int
        title: String!
        content: String
        status: TaskStatus
        priority: TaskPriority
        isImportant: Boolean
        dueDate: DateTime!
        reminderDate: DateTime
        doSendMail: Boolean
        account: AccountCreateOneWithoutTasksInput!
        steps: StepCreateManyWithoutTaskInput
        images: ImageCreateManyWithoutTaskInput
      }

      input TaskCreateWithoutImagesInput {
        id: UUID
        index: Int
        title: String!
        content: String
        status: TaskStatus
        priority: TaskPriority
        isImportant: Boolean
        dueDate: DateTime!
        reminderDate: DateTime
        doSendMail: Boolean
        category: CategoryCreateOneWithoutTasksInput!
        account: AccountCreateOneWithoutTasksInput!
        steps: StepCreateManyWithoutTaskInput
      }

      input TaskCreateWithoutStepsInput {
        id: UUID
        index: Int
        title: String!
        content: String
        status: TaskStatus
        priority: TaskPriority
        isImportant: Boolean
        dueDate: DateTime!
        reminderDate: DateTime
        doSendMail: Boolean
        category: CategoryCreateOneWithoutTasksInput!
        account: AccountCreateOneWithoutTasksInput!
        images: ImageCreateManyWithoutTaskInput
      }

      type TaskEdge {
        node: Task!
        cursor: String!
      }

      enum TaskOrderByInput {
        id_ASC
        id_DESC
        index_ASC
        index_DESC
        title_ASC
        title_DESC
        content_ASC
        content_DESC
        status_ASC
        status_DESC
        priority_ASC
        priority_DESC
        isImportant_ASC
        isImportant_DESC
        dueDate_ASC
        dueDate_DESC
        reminderDate_ASC
        reminderDate_DESC
        doSendMail_ASC
        doSendMail_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
      }

      type TaskPreviousValues {
        id: UUID!
        index: Int
        title: String!
        content: String
        status: TaskStatus!
        priority: TaskPriority!
        isImportant: Boolean!
        dueDate: DateTime!
        reminderDate: DateTime
        doSendMail: Boolean!
        createdAt: DateTime!
        updatedAt: DateTime!
      }

      enum TaskPriority {
        Highest
        Hight
        Medium
        Low
        Lowest
      }

      input TaskScalarWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        index: Int
        index_not: Int
        index_in: [Int!]
        index_not_in: [Int!]
        index_lt: Int
        index_lte: Int
        index_gt: Int
        index_gte: Int
        title: String
        title_not: String
        title_in: [String!]
        title_not_in: [String!]
        title_lt: String
        title_lte: String
        title_gt: String
        title_gte: String
        title_contains: String
        title_not_contains: String
        title_starts_with: String
        title_not_starts_with: String
        title_ends_with: String
        title_not_ends_with: String
        content: String
        content_not: String
        content_in: [String!]
        content_not_in: [String!]
        content_lt: String
        content_lte: String
        content_gt: String
        content_gte: String
        content_contains: String
        content_not_contains: String
        content_starts_with: String
        content_not_starts_with: String
        content_ends_with: String
        content_not_ends_with: String
        status: TaskStatus
        status_not: TaskStatus
        status_in: [TaskStatus!]
        status_not_in: [TaskStatus!]
        priority: TaskPriority
        priority_not: TaskPriority
        priority_in: [TaskPriority!]
        priority_not_in: [TaskPriority!]
        isImportant: Boolean
        isImportant_not: Boolean
        dueDate: DateTime
        dueDate_not: DateTime
        dueDate_in: [DateTime!]
        dueDate_not_in: [DateTime!]
        dueDate_lt: DateTime
        dueDate_lte: DateTime
        dueDate_gt: DateTime
        dueDate_gte: DateTime
        reminderDate: DateTime
        reminderDate_not: DateTime
        reminderDate_in: [DateTime!]
        reminderDate_not_in: [DateTime!]
        reminderDate_lt: DateTime
        reminderDate_lte: DateTime
        reminderDate_gt: DateTime
        reminderDate_gte: DateTime
        doSendMail: Boolean
        doSendMail_not: Boolean
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [TaskScalarWhereInput!]
        OR: [TaskScalarWhereInput!]
        NOT: [TaskScalarWhereInput!]
      }

      enum TaskStatus {
        Todo
        InProcess
        Expired
        Done
      }

      type TaskSubscriptionPayload {
        mutation: MutationType!
        node: Task
        updatedFields: [String!]
        previousValues: TaskPreviousValues
      }

      input TaskSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: TaskWhereInput
        AND: [TaskSubscriptionWhereInput!]
        OR: [TaskSubscriptionWhereInput!]
        NOT: [TaskSubscriptionWhereInput!]
      }

      input TaskUpdateInput {
        index: Int
        title: String
        content: String
        status: TaskStatus
        priority: TaskPriority
        isImportant: Boolean
        dueDate: DateTime
        reminderDate: DateTime
        doSendMail: Boolean
        category: CategoryUpdateOneRequiredWithoutTasksInput
        account: AccountUpdateOneRequiredWithoutTasksInput
        steps: StepUpdateManyWithoutTaskInput
        images: ImageUpdateManyWithoutTaskInput
      }

      input TaskUpdateManyDataInput {
        index: Int
        title: String
        content: String
        status: TaskStatus
        priority: TaskPriority
        isImportant: Boolean
        dueDate: DateTime
        reminderDate: DateTime
        doSendMail: Boolean
      }

      input TaskUpdateManyMutationInput {
        index: Int
        title: String
        content: String
        status: TaskStatus
        priority: TaskPriority
        isImportant: Boolean
        dueDate: DateTime
        reminderDate: DateTime
        doSendMail: Boolean
      }

      input TaskUpdateManyWithoutAccountInput {
        create: [TaskCreateWithoutAccountInput!]
        delete: [TaskWhereUniqueInput!]
        connect: [TaskWhereUniqueInput!]
        set: [TaskWhereUniqueInput!]
        disconnect: [TaskWhereUniqueInput!]
        update: [TaskUpdateWithWhereUniqueWithoutAccountInput!]
        upsert: [TaskUpsertWithWhereUniqueWithoutAccountInput!]
        deleteMany: [TaskScalarWhereInput!]
        updateMany: [TaskUpdateManyWithWhereNestedInput!]
      }

      input TaskUpdateManyWithoutCategoryInput {
        create: [TaskCreateWithoutCategoryInput!]
        delete: [TaskWhereUniqueInput!]
        connect: [TaskWhereUniqueInput!]
        set: [TaskWhereUniqueInput!]
        disconnect: [TaskWhereUniqueInput!]
        update: [TaskUpdateWithWhereUniqueWithoutCategoryInput!]
        upsert: [TaskUpsertWithWhereUniqueWithoutCategoryInput!]
        deleteMany: [TaskScalarWhereInput!]
        updateMany: [TaskUpdateManyWithWhereNestedInput!]
      }

      input TaskUpdateManyWithWhereNestedInput {
        where: TaskScalarWhereInput!
        data: TaskUpdateManyDataInput!
      }

      input TaskUpdateOneRequiredWithoutImagesInput {
        create: TaskCreateWithoutImagesInput
        update: TaskUpdateWithoutImagesDataInput
        upsert: TaskUpsertWithoutImagesInput
        connect: TaskWhereUniqueInput
      }

      input TaskUpdateOneRequiredWithoutStepsInput {
        create: TaskCreateWithoutStepsInput
        update: TaskUpdateWithoutStepsDataInput
        upsert: TaskUpsertWithoutStepsInput
        connect: TaskWhereUniqueInput
      }

      input TaskUpdateWithoutAccountDataInput {
        index: Int
        title: String
        content: String
        status: TaskStatus
        priority: TaskPriority
        isImportant: Boolean
        dueDate: DateTime
        reminderDate: DateTime
        doSendMail: Boolean
        category: CategoryUpdateOneRequiredWithoutTasksInput
        steps: StepUpdateManyWithoutTaskInput
        images: ImageUpdateManyWithoutTaskInput
      }

      input TaskUpdateWithoutCategoryDataInput {
        index: Int
        title: String
        content: String
        status: TaskStatus
        priority: TaskPriority
        isImportant: Boolean
        dueDate: DateTime
        reminderDate: DateTime
        doSendMail: Boolean
        account: AccountUpdateOneRequiredWithoutTasksInput
        steps: StepUpdateManyWithoutTaskInput
        images: ImageUpdateManyWithoutTaskInput
      }

      input TaskUpdateWithoutImagesDataInput {
        index: Int
        title: String
        content: String
        status: TaskStatus
        priority: TaskPriority
        isImportant: Boolean
        dueDate: DateTime
        reminderDate: DateTime
        doSendMail: Boolean
        category: CategoryUpdateOneRequiredWithoutTasksInput
        account: AccountUpdateOneRequiredWithoutTasksInput
        steps: StepUpdateManyWithoutTaskInput
      }

      input TaskUpdateWithoutStepsDataInput {
        index: Int
        title: String
        content: String
        status: TaskStatus
        priority: TaskPriority
        isImportant: Boolean
        dueDate: DateTime
        reminderDate: DateTime
        doSendMail: Boolean
        category: CategoryUpdateOneRequiredWithoutTasksInput
        account: AccountUpdateOneRequiredWithoutTasksInput
        images: ImageUpdateManyWithoutTaskInput
      }

      input TaskUpdateWithWhereUniqueWithoutAccountInput {
        where: TaskWhereUniqueInput!
        data: TaskUpdateWithoutAccountDataInput!
      }

      input TaskUpdateWithWhereUniqueWithoutCategoryInput {
        where: TaskWhereUniqueInput!
        data: TaskUpdateWithoutCategoryDataInput!
      }

      input TaskUpsertWithoutImagesInput {
        update: TaskUpdateWithoutImagesDataInput!
        create: TaskCreateWithoutImagesInput!
      }

      input TaskUpsertWithoutStepsInput {
        update: TaskUpdateWithoutStepsDataInput!
        create: TaskCreateWithoutStepsInput!
      }

      input TaskUpsertWithWhereUniqueWithoutAccountInput {
        where: TaskWhereUniqueInput!
        update: TaskUpdateWithoutAccountDataInput!
        create: TaskCreateWithoutAccountInput!
      }

      input TaskUpsertWithWhereUniqueWithoutCategoryInput {
        where: TaskWhereUniqueInput!
        update: TaskUpdateWithoutCategoryDataInput!
        create: TaskCreateWithoutCategoryInput!
      }

      input TaskWhereInput {
        id: UUID
        id_not: UUID
        id_in: [UUID!]
        id_not_in: [UUID!]
        id_lt: UUID
        id_lte: UUID
        id_gt: UUID
        id_gte: UUID
        id_contains: UUID
        id_not_contains: UUID
        id_starts_with: UUID
        id_not_starts_with: UUID
        id_ends_with: UUID
        id_not_ends_with: UUID
        index: Int
        index_not: Int
        index_in: [Int!]
        index_not_in: [Int!]
        index_lt: Int
        index_lte: Int
        index_gt: Int
        index_gte: Int
        title: String
        title_not: String
        title_in: [String!]
        title_not_in: [String!]
        title_lt: String
        title_lte: String
        title_gt: String
        title_gte: String
        title_contains: String
        title_not_contains: String
        title_starts_with: String
        title_not_starts_with: String
        title_ends_with: String
        title_not_ends_with: String
        content: String
        content_not: String
        content_in: [String!]
        content_not_in: [String!]
        content_lt: String
        content_lte: String
        content_gt: String
        content_gte: String
        content_contains: String
        content_not_contains: String
        content_starts_with: String
        content_not_starts_with: String
        content_ends_with: String
        content_not_ends_with: String
        status: TaskStatus
        status_not: TaskStatus
        status_in: [TaskStatus!]
        status_not_in: [TaskStatus!]
        priority: TaskPriority
        priority_not: TaskPriority
        priority_in: [TaskPriority!]
        priority_not_in: [TaskPriority!]
        isImportant: Boolean
        isImportant_not: Boolean
        dueDate: DateTime
        dueDate_not: DateTime
        dueDate_in: [DateTime!]
        dueDate_not_in: [DateTime!]
        dueDate_lt: DateTime
        dueDate_lte: DateTime
        dueDate_gt: DateTime
        dueDate_gte: DateTime
        reminderDate: DateTime
        reminderDate_not: DateTime
        reminderDate_in: [DateTime!]
        reminderDate_not_in: [DateTime!]
        reminderDate_lt: DateTime
        reminderDate_lte: DateTime
        reminderDate_gt: DateTime
        reminderDate_gte: DateTime
        doSendMail: Boolean
        doSendMail_not: Boolean
        category: CategoryWhereInput
        account: AccountWhereInput
        steps_every: StepWhereInput
        steps_some: StepWhereInput
        steps_none: StepWhereInput
        images_every: ImageWhereInput
        images_some: ImageWhereInput
        images_none: ImageWhereInput
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [TaskWhereInput!]
        OR: [TaskWhereInput!]
        NOT: [TaskWhereInput!]
      }

      input TaskWhereUniqueInput {
        id: UUID
      }

      scalar UUID
    `,
};
